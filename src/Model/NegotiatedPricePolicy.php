<?php
/**
 * NegotiatedPricePolicy
 *
 * PHP version 8.1
 *
 * @package  eBay\Sell\Metadata
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Metadata API
 *
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.8.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eBay\Sell\Metadata\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use eBay\Sell\Metadata\ObjectSerializer;

/**
 * NegotiatedPricePolicy Class Doc Comment
 *
 * @package  eBay\Sell\Metadata
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class NegotiatedPricePolicy implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'NegotiatedPricePolicy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'best_offer_auto_accept_enabled' => 'bool',
        'best_offer_auto_decline_enabled' => 'bool',
        'best_offer_counter_enabled' => 'bool',
        'category_id' => 'string',
        'category_tree_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'best_offer_auto_accept_enabled' => null,
        'best_offer_auto_decline_enabled' => null,
        'best_offer_counter_enabled' => null,
        'category_id' => null,
        'category_tree_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'best_offer_auto_accept_enabled' => false,
        'best_offer_auto_decline_enabled' => false,
        'best_offer_counter_enabled' => false,
        'category_id' => false,
        'category_tree_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'best_offer_auto_accept_enabled' => 'bestOfferAutoAcceptEnabled',
        'best_offer_auto_decline_enabled' => 'bestOfferAutoDeclineEnabled',
        'best_offer_counter_enabled' => 'bestOfferCounterEnabled',
        'category_id' => 'categoryId',
        'category_tree_id' => 'categoryTreeId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'best_offer_auto_accept_enabled' => 'setBestOfferAutoAcceptEnabled',
        'best_offer_auto_decline_enabled' => 'setBestOfferAutoDeclineEnabled',
        'best_offer_counter_enabled' => 'setBestOfferCounterEnabled',
        'category_id' => 'setCategoryId',
        'category_tree_id' => 'setCategoryTreeId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'best_offer_auto_accept_enabled' => 'getBestOfferAutoAcceptEnabled',
        'best_offer_auto_decline_enabled' => 'getBestOfferAutoDeclineEnabled',
        'best_offer_counter_enabled' => 'getBestOfferCounterEnabled',
        'category_id' => 'getCategoryId',
        'category_tree_id' => 'getCategoryTreeId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('best_offer_auto_accept_enabled', $data ?? [], null);
        $this->setIfExists('best_offer_auto_decline_enabled', $data ?? [], null);
        $this->setIfExists('best_offer_counter_enabled', $data ?? [], null);
        $this->setIfExists('category_id', $data ?? [], null);
        $this->setIfExists('category_tree_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets best_offer_auto_accept_enabled
     *
     * @return bool|null
     */
    public function getBestOfferAutoAcceptEnabled(): ?bool
    {
        return $this->container['best_offer_auto_accept_enabled'];
    }

    /**
     * Sets best_offer_auto_accept_enabled
     *
     * @param bool|null $best_offer_auto_accept_enabled This flag denotes whether or not the category supports the setting of a price at which best offers are automatically accepted. If set to <code>true</code>, the category does support the setting of an automatic price for best-offers.
     *
     * @return $this
     */
    public function setBestOfferAutoAcceptEnabled(?bool $best_offer_auto_accept_enabled): static
    {
        if (is_null($best_offer_auto_accept_enabled)) {
            throw new InvalidArgumentException('non-nullable best_offer_auto_accept_enabled cannot be null');
        }
        $this->container['best_offer_auto_accept_enabled'] = $best_offer_auto_accept_enabled;

        return $this;
    }

    /**
     * Gets best_offer_auto_decline_enabled
     *
     * @return bool|null
     */
    public function getBestOfferAutoDeclineEnabled(): ?bool
    {
        return $this->container['best_offer_auto_decline_enabled'];
    }

    /**
     * Sets best_offer_auto_decline_enabled
     *
     * @param bool|null $best_offer_auto_decline_enabled This flag denotes whether or not the category supports the setting of an auto-decline price for best offers. If set to <code>true</code>, the category does support the setting of an automatic-decline price for best-offers.
     *
     * @return $this
     */
    public function setBestOfferAutoDeclineEnabled(?bool $best_offer_auto_decline_enabled): static
    {
        if (is_null($best_offer_auto_decline_enabled)) {
            throw new InvalidArgumentException('non-nullable best_offer_auto_decline_enabled cannot be null');
        }
        $this->container['best_offer_auto_decline_enabled'] = $best_offer_auto_decline_enabled;

        return $this;
    }

    /**
     * Gets best_offer_counter_enabled
     *
     * @return bool|null
     */
    public function getBestOfferCounterEnabled(): ?bool
    {
        return $this->container['best_offer_counter_enabled'];
    }

    /**
     * Sets best_offer_counter_enabled
     *
     * @param bool|null $best_offer_counter_enabled This flag denotes whether or not the category supports the setting for an automatic counter-offer on best offers. If set to <code>true</code>, the category does support the setting of an automatic counter-offer price for best-offers.
     *
     * @return $this
     */
    public function setBestOfferCounterEnabled(?bool $best_offer_counter_enabled): static
    {
        if (is_null($best_offer_counter_enabled)) {
            throw new InvalidArgumentException('non-nullable best_offer_counter_enabled cannot be null');
        }
        $this->container['best_offer_counter_enabled'] = $best_offer_counter_enabled;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return string|null
     */
    public function getCategoryId(): ?string
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param string|null $category_id The category ID to which the negotiated-price policies apply.
     *
     * @return $this
     */
    public function setCategoryId(?string $category_id): static
    {
        if (is_null($category_id)) {
            throw new InvalidArgumentException('non-nullable category_id cannot be null');
        }
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets category_tree_id
     *
     * @return string|null
     */
    public function getCategoryTreeId(): ?string
    {
        return $this->container['category_tree_id'];
    }

    /**
     * Sets category_tree_id
     *
     * @param string|null $category_tree_id A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    <br><br>A <i>category tree</i> is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique <b>categoryId</b> value. Within a category tree, the root node has no parent node and <i>leaf nodes</i> are nodes that have no child nodes.
     *
     * @return $this
     */
    public function setCategoryTreeId(?string $category_tree_id): static
    {
        if (is_null($category_tree_id)) {
            throw new InvalidArgumentException('non-nullable category_tree_id cannot be null');
        }
        $this->container['category_tree_id'] = $category_tree_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


