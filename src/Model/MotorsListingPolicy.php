<?php

/**
 * MotorsListingPolicy
 *
 * PHP version 8.1
 *
 * @package  eBay\Sell\Metadata
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Metadata API
 *
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.11.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eBay\Sell\Metadata\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use eBay\Sell\Metadata\ObjectSerializer;

/**
 * MotorsListingPolicy Class Doc Comment
 *
 * @package  eBay\Sell\Metadata
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class MotorsListingPolicy implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'MotorsListingPolicy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'category_id' => 'string',
        'category_tree_id' => 'string',
        'deposit_supported' => 'bool',
        'ebay_motors_pro_ad_format_enabled' => 'string',
        'ebay_motors_pro_auto_accept_enabled' => 'bool',
        'ebay_motors_pro_auto_decline_enabled' => 'bool',
        'ebay_motors_pro_best_offer_enabled' => 'string',
        'ebay_motors_pro_company_name_enabled' => 'bool',
        'ebay_motors_pro_contact_by_address_enabled' => 'bool',
        'ebay_motors_pro_contact_by_email_enabled' => 'bool',
        'ebay_motors_pro_contact_by_phone_enabled' => 'bool',
        'ebay_motors_pro_counter_offer_enabled' => 'bool',
        'ebay_motors_pro_payment_method_check_out_enabled' => 'string',
        'ebay_motors_pro_phone_count' => 'int',
        'ebay_motors_pro_seller_contact_details_enabled' => 'bool',
        'ebay_motors_pro_shipping_method_enabled' => 'bool',
        'ebay_motors_pro_street_count' => 'int',
        'epid_supported' => 'bool',
        'k_type_supported' => 'bool',
        'local_listing_distances' => '\eBay\Sell\Metadata\Model\LocalListingDistance[]',
        'local_market_ad_format_enabled' => 'string',
        'local_market_auto_accept_enabled' => 'bool',
        'local_market_auto_decline_enabled' => 'bool',
        'local_market_best_offer_enabled' => 'string',
        'local_market_company_name_enabled' => 'bool',
        'local_market_contact_by_address_enabled' => 'bool',
        'local_market_contact_by_email_enabled' => 'bool',
        'local_market_contact_by_phone_enabled' => 'bool',
        'local_market_counter_offer_enabled' => 'bool',
        'local_market_non_subscription' => 'bool',
        'local_market_payment_method_check_out_enabled' => 'string',
        'local_market_phone_count' => 'int',
        'local_market_premium_subscription' => 'bool',
        'local_market_regular_subscription' => 'bool',
        'local_market_seller_contact_details_enabled' => 'bool',
        'local_market_shipping_method_enabled' => 'bool',
        'local_market_speciality_subscription' => 'bool',
        'local_market_street_count' => 'int',
        'max_granular_fitment_count' => 'int',
        'max_item_compatibility' => 'int',
        'min_item_compatibility' => 'int',
        'non_subscription' => 'string',
        'premium_subscription' => 'string',
        'regular_subscription' => 'string',
        'seller_provided_title_supported' => 'bool',
        'speciality_subscription' => 'string',
        'vin_supported' => 'bool',
        'vrm_supported' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'category_id' => null,
        'category_tree_id' => null,
        'deposit_supported' => null,
        'ebay_motors_pro_ad_format_enabled' => null,
        'ebay_motors_pro_auto_accept_enabled' => null,
        'ebay_motors_pro_auto_decline_enabled' => null,
        'ebay_motors_pro_best_offer_enabled' => null,
        'ebay_motors_pro_company_name_enabled' => null,
        'ebay_motors_pro_contact_by_address_enabled' => null,
        'ebay_motors_pro_contact_by_email_enabled' => null,
        'ebay_motors_pro_contact_by_phone_enabled' => null,
        'ebay_motors_pro_counter_offer_enabled' => null,
        'ebay_motors_pro_payment_method_check_out_enabled' => null,
        'ebay_motors_pro_phone_count' => 'int32',
        'ebay_motors_pro_seller_contact_details_enabled' => null,
        'ebay_motors_pro_shipping_method_enabled' => null,
        'ebay_motors_pro_street_count' => 'int32',
        'epid_supported' => null,
        'k_type_supported' => null,
        'local_listing_distances' => null,
        'local_market_ad_format_enabled' => null,
        'local_market_auto_accept_enabled' => null,
        'local_market_auto_decline_enabled' => null,
        'local_market_best_offer_enabled' => null,
        'local_market_company_name_enabled' => null,
        'local_market_contact_by_address_enabled' => null,
        'local_market_contact_by_email_enabled' => null,
        'local_market_contact_by_phone_enabled' => null,
        'local_market_counter_offer_enabled' => null,
        'local_market_non_subscription' => null,
        'local_market_payment_method_check_out_enabled' => null,
        'local_market_phone_count' => 'int32',
        'local_market_premium_subscription' => null,
        'local_market_regular_subscription' => null,
        'local_market_seller_contact_details_enabled' => null,
        'local_market_shipping_method_enabled' => null,
        'local_market_speciality_subscription' => null,
        'local_market_street_count' => 'int32',
        'max_granular_fitment_count' => 'int32',
        'max_item_compatibility' => 'int32',
        'min_item_compatibility' => 'int32',
        'non_subscription' => null,
        'premium_subscription' => null,
        'regular_subscription' => null,
        'seller_provided_title_supported' => null,
        'speciality_subscription' => null,
        'vin_supported' => null,
        'vrm_supported' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'category_id' => false,
        'category_tree_id' => false,
        'deposit_supported' => false,
        'ebay_motors_pro_ad_format_enabled' => false,
        'ebay_motors_pro_auto_accept_enabled' => false,
        'ebay_motors_pro_auto_decline_enabled' => false,
        'ebay_motors_pro_best_offer_enabled' => false,
        'ebay_motors_pro_company_name_enabled' => false,
        'ebay_motors_pro_contact_by_address_enabled' => false,
        'ebay_motors_pro_contact_by_email_enabled' => false,
        'ebay_motors_pro_contact_by_phone_enabled' => false,
        'ebay_motors_pro_counter_offer_enabled' => false,
        'ebay_motors_pro_payment_method_check_out_enabled' => false,
        'ebay_motors_pro_phone_count' => false,
        'ebay_motors_pro_seller_contact_details_enabled' => false,
        'ebay_motors_pro_shipping_method_enabled' => false,
        'ebay_motors_pro_street_count' => false,
        'epid_supported' => false,
        'k_type_supported' => false,
        'local_listing_distances' => false,
        'local_market_ad_format_enabled' => false,
        'local_market_auto_accept_enabled' => false,
        'local_market_auto_decline_enabled' => false,
        'local_market_best_offer_enabled' => false,
        'local_market_company_name_enabled' => false,
        'local_market_contact_by_address_enabled' => false,
        'local_market_contact_by_email_enabled' => false,
        'local_market_contact_by_phone_enabled' => false,
        'local_market_counter_offer_enabled' => false,
        'local_market_non_subscription' => false,
        'local_market_payment_method_check_out_enabled' => false,
        'local_market_phone_count' => false,
        'local_market_premium_subscription' => false,
        'local_market_regular_subscription' => false,
        'local_market_seller_contact_details_enabled' => false,
        'local_market_shipping_method_enabled' => false,
        'local_market_speciality_subscription' => false,
        'local_market_street_count' => false,
        'max_granular_fitment_count' => false,
        'max_item_compatibility' => false,
        'min_item_compatibility' => false,
        'non_subscription' => false,
        'premium_subscription' => false,
        'regular_subscription' => false,
        'seller_provided_title_supported' => false,
        'speciality_subscription' => false,
        'vin_supported' => false,
        'vrm_supported' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'category_id' => 'categoryId',
        'category_tree_id' => 'categoryTreeId',
        'deposit_supported' => 'depositSupported',
        'ebay_motors_pro_ad_format_enabled' => 'ebayMotorsProAdFormatEnabled',
        'ebay_motors_pro_auto_accept_enabled' => 'ebayMotorsProAutoAcceptEnabled',
        'ebay_motors_pro_auto_decline_enabled' => 'ebayMotorsProAutoDeclineEnabled',
        'ebay_motors_pro_best_offer_enabled' => 'ebayMotorsProBestOfferEnabled',
        'ebay_motors_pro_company_name_enabled' => 'ebayMotorsProCompanyNameEnabled',
        'ebay_motors_pro_contact_by_address_enabled' => 'ebayMotorsProContactByAddressEnabled',
        'ebay_motors_pro_contact_by_email_enabled' => 'ebayMotorsProContactByEmailEnabled',
        'ebay_motors_pro_contact_by_phone_enabled' => 'ebayMotorsProContactByPhoneEnabled',
        'ebay_motors_pro_counter_offer_enabled' => 'ebayMotorsProCounterOfferEnabled',
        'ebay_motors_pro_payment_method_check_out_enabled' => 'ebayMotorsProPaymentMethodCheckOutEnabled',
        'ebay_motors_pro_phone_count' => 'ebayMotorsProPhoneCount',
        'ebay_motors_pro_seller_contact_details_enabled' => 'ebayMotorsProSellerContactDetailsEnabled',
        'ebay_motors_pro_shipping_method_enabled' => 'ebayMotorsProShippingMethodEnabled',
        'ebay_motors_pro_street_count' => 'ebayMotorsProStreetCount',
        'epid_supported' => 'epidSupported',
        'k_type_supported' => 'kTypeSupported',
        'local_listing_distances' => 'localListingDistances',
        'local_market_ad_format_enabled' => 'localMarketAdFormatEnabled',
        'local_market_auto_accept_enabled' => 'localMarketAutoAcceptEnabled',
        'local_market_auto_decline_enabled' => 'localMarketAutoDeclineEnabled',
        'local_market_best_offer_enabled' => 'localMarketBestOfferEnabled',
        'local_market_company_name_enabled' => 'localMarketCompanyNameEnabled',
        'local_market_contact_by_address_enabled' => 'localMarketContactByAddressEnabled',
        'local_market_contact_by_email_enabled' => 'localMarketContactByEmailEnabled',
        'local_market_contact_by_phone_enabled' => 'localMarketContactByPhoneEnabled',
        'local_market_counter_offer_enabled' => 'localMarketCounterOfferEnabled',
        'local_market_non_subscription' => 'localMarketNonSubscription',
        'local_market_payment_method_check_out_enabled' => 'localMarketPaymentMethodCheckOutEnabled',
        'local_market_phone_count' => 'localMarketPhoneCount',
        'local_market_premium_subscription' => 'localMarketPremiumSubscription',
        'local_market_regular_subscription' => 'localMarketRegularSubscription',
        'local_market_seller_contact_details_enabled' => 'localMarketSellerContactDetailsEnabled',
        'local_market_shipping_method_enabled' => 'localMarketShippingMethodEnabled',
        'local_market_speciality_subscription' => 'localMarketSpecialitySubscription',
        'local_market_street_count' => 'localMarketStreetCount',
        'max_granular_fitment_count' => 'maxGranularFitmentCount',
        'max_item_compatibility' => 'maxItemCompatibility',
        'min_item_compatibility' => 'minItemCompatibility',
        'non_subscription' => 'nonSubscription',
        'premium_subscription' => 'premiumSubscription',
        'regular_subscription' => 'regularSubscription',
        'seller_provided_title_supported' => 'sellerProvidedTitleSupported',
        'speciality_subscription' => 'specialitySubscription',
        'vin_supported' => 'vinSupported',
        'vrm_supported' => 'vrmSupported'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'category_id' => 'setCategoryId',
        'category_tree_id' => 'setCategoryTreeId',
        'deposit_supported' => 'setDepositSupported',
        'ebay_motors_pro_ad_format_enabled' => 'setEbayMotorsProAdFormatEnabled',
        'ebay_motors_pro_auto_accept_enabled' => 'setEbayMotorsProAutoAcceptEnabled',
        'ebay_motors_pro_auto_decline_enabled' => 'setEbayMotorsProAutoDeclineEnabled',
        'ebay_motors_pro_best_offer_enabled' => 'setEbayMotorsProBestOfferEnabled',
        'ebay_motors_pro_company_name_enabled' => 'setEbayMotorsProCompanyNameEnabled',
        'ebay_motors_pro_contact_by_address_enabled' => 'setEbayMotorsProContactByAddressEnabled',
        'ebay_motors_pro_contact_by_email_enabled' => 'setEbayMotorsProContactByEmailEnabled',
        'ebay_motors_pro_contact_by_phone_enabled' => 'setEbayMotorsProContactByPhoneEnabled',
        'ebay_motors_pro_counter_offer_enabled' => 'setEbayMotorsProCounterOfferEnabled',
        'ebay_motors_pro_payment_method_check_out_enabled' => 'setEbayMotorsProPaymentMethodCheckOutEnabled',
        'ebay_motors_pro_phone_count' => 'setEbayMotorsProPhoneCount',
        'ebay_motors_pro_seller_contact_details_enabled' => 'setEbayMotorsProSellerContactDetailsEnabled',
        'ebay_motors_pro_shipping_method_enabled' => 'setEbayMotorsProShippingMethodEnabled',
        'ebay_motors_pro_street_count' => 'setEbayMotorsProStreetCount',
        'epid_supported' => 'setEpidSupported',
        'k_type_supported' => 'setKTypeSupported',
        'local_listing_distances' => 'setLocalListingDistances',
        'local_market_ad_format_enabled' => 'setLocalMarketAdFormatEnabled',
        'local_market_auto_accept_enabled' => 'setLocalMarketAutoAcceptEnabled',
        'local_market_auto_decline_enabled' => 'setLocalMarketAutoDeclineEnabled',
        'local_market_best_offer_enabled' => 'setLocalMarketBestOfferEnabled',
        'local_market_company_name_enabled' => 'setLocalMarketCompanyNameEnabled',
        'local_market_contact_by_address_enabled' => 'setLocalMarketContactByAddressEnabled',
        'local_market_contact_by_email_enabled' => 'setLocalMarketContactByEmailEnabled',
        'local_market_contact_by_phone_enabled' => 'setLocalMarketContactByPhoneEnabled',
        'local_market_counter_offer_enabled' => 'setLocalMarketCounterOfferEnabled',
        'local_market_non_subscription' => 'setLocalMarketNonSubscription',
        'local_market_payment_method_check_out_enabled' => 'setLocalMarketPaymentMethodCheckOutEnabled',
        'local_market_phone_count' => 'setLocalMarketPhoneCount',
        'local_market_premium_subscription' => 'setLocalMarketPremiumSubscription',
        'local_market_regular_subscription' => 'setLocalMarketRegularSubscription',
        'local_market_seller_contact_details_enabled' => 'setLocalMarketSellerContactDetailsEnabled',
        'local_market_shipping_method_enabled' => 'setLocalMarketShippingMethodEnabled',
        'local_market_speciality_subscription' => 'setLocalMarketSpecialitySubscription',
        'local_market_street_count' => 'setLocalMarketStreetCount',
        'max_granular_fitment_count' => 'setMaxGranularFitmentCount',
        'max_item_compatibility' => 'setMaxItemCompatibility',
        'min_item_compatibility' => 'setMinItemCompatibility',
        'non_subscription' => 'setNonSubscription',
        'premium_subscription' => 'setPremiumSubscription',
        'regular_subscription' => 'setRegularSubscription',
        'seller_provided_title_supported' => 'setSellerProvidedTitleSupported',
        'speciality_subscription' => 'setSpecialitySubscription',
        'vin_supported' => 'setVinSupported',
        'vrm_supported' => 'setVrmSupported'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'category_id' => 'getCategoryId',
        'category_tree_id' => 'getCategoryTreeId',
        'deposit_supported' => 'getDepositSupported',
        'ebay_motors_pro_ad_format_enabled' => 'getEbayMotorsProAdFormatEnabled',
        'ebay_motors_pro_auto_accept_enabled' => 'getEbayMotorsProAutoAcceptEnabled',
        'ebay_motors_pro_auto_decline_enabled' => 'getEbayMotorsProAutoDeclineEnabled',
        'ebay_motors_pro_best_offer_enabled' => 'getEbayMotorsProBestOfferEnabled',
        'ebay_motors_pro_company_name_enabled' => 'getEbayMotorsProCompanyNameEnabled',
        'ebay_motors_pro_contact_by_address_enabled' => 'getEbayMotorsProContactByAddressEnabled',
        'ebay_motors_pro_contact_by_email_enabled' => 'getEbayMotorsProContactByEmailEnabled',
        'ebay_motors_pro_contact_by_phone_enabled' => 'getEbayMotorsProContactByPhoneEnabled',
        'ebay_motors_pro_counter_offer_enabled' => 'getEbayMotorsProCounterOfferEnabled',
        'ebay_motors_pro_payment_method_check_out_enabled' => 'getEbayMotorsProPaymentMethodCheckOutEnabled',
        'ebay_motors_pro_phone_count' => 'getEbayMotorsProPhoneCount',
        'ebay_motors_pro_seller_contact_details_enabled' => 'getEbayMotorsProSellerContactDetailsEnabled',
        'ebay_motors_pro_shipping_method_enabled' => 'getEbayMotorsProShippingMethodEnabled',
        'ebay_motors_pro_street_count' => 'getEbayMotorsProStreetCount',
        'epid_supported' => 'getEpidSupported',
        'k_type_supported' => 'getKTypeSupported',
        'local_listing_distances' => 'getLocalListingDistances',
        'local_market_ad_format_enabled' => 'getLocalMarketAdFormatEnabled',
        'local_market_auto_accept_enabled' => 'getLocalMarketAutoAcceptEnabled',
        'local_market_auto_decline_enabled' => 'getLocalMarketAutoDeclineEnabled',
        'local_market_best_offer_enabled' => 'getLocalMarketBestOfferEnabled',
        'local_market_company_name_enabled' => 'getLocalMarketCompanyNameEnabled',
        'local_market_contact_by_address_enabled' => 'getLocalMarketContactByAddressEnabled',
        'local_market_contact_by_email_enabled' => 'getLocalMarketContactByEmailEnabled',
        'local_market_contact_by_phone_enabled' => 'getLocalMarketContactByPhoneEnabled',
        'local_market_counter_offer_enabled' => 'getLocalMarketCounterOfferEnabled',
        'local_market_non_subscription' => 'getLocalMarketNonSubscription',
        'local_market_payment_method_check_out_enabled' => 'getLocalMarketPaymentMethodCheckOutEnabled',
        'local_market_phone_count' => 'getLocalMarketPhoneCount',
        'local_market_premium_subscription' => 'getLocalMarketPremiumSubscription',
        'local_market_regular_subscription' => 'getLocalMarketRegularSubscription',
        'local_market_seller_contact_details_enabled' => 'getLocalMarketSellerContactDetailsEnabled',
        'local_market_shipping_method_enabled' => 'getLocalMarketShippingMethodEnabled',
        'local_market_speciality_subscription' => 'getLocalMarketSpecialitySubscription',
        'local_market_street_count' => 'getLocalMarketStreetCount',
        'max_granular_fitment_count' => 'getMaxGranularFitmentCount',
        'max_item_compatibility' => 'getMaxItemCompatibility',
        'min_item_compatibility' => 'getMinItemCompatibility',
        'non_subscription' => 'getNonSubscription',
        'premium_subscription' => 'getPremiumSubscription',
        'regular_subscription' => 'getRegularSubscription',
        'seller_provided_title_supported' => 'getSellerProvidedTitleSupported',
        'speciality_subscription' => 'getSpecialitySubscription',
        'vin_supported' => 'getVinSupported',
        'vrm_supported' => 'getVrmSupported'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('category_id', $data ?? [], null);
        $this->setIfExists('category_tree_id', $data ?? [], null);
        $this->setIfExists('deposit_supported', $data ?? [], null);
        $this->setIfExists('ebay_motors_pro_ad_format_enabled', $data ?? [], null);
        $this->setIfExists('ebay_motors_pro_auto_accept_enabled', $data ?? [], null);
        $this->setIfExists('ebay_motors_pro_auto_decline_enabled', $data ?? [], null);
        $this->setIfExists('ebay_motors_pro_best_offer_enabled', $data ?? [], null);
        $this->setIfExists('ebay_motors_pro_company_name_enabled', $data ?? [], null);
        $this->setIfExists('ebay_motors_pro_contact_by_address_enabled', $data ?? [], null);
        $this->setIfExists('ebay_motors_pro_contact_by_email_enabled', $data ?? [], null);
        $this->setIfExists('ebay_motors_pro_contact_by_phone_enabled', $data ?? [], null);
        $this->setIfExists('ebay_motors_pro_counter_offer_enabled', $data ?? [], null);
        $this->setIfExists('ebay_motors_pro_payment_method_check_out_enabled', $data ?? [], null);
        $this->setIfExists('ebay_motors_pro_phone_count', $data ?? [], null);
        $this->setIfExists('ebay_motors_pro_seller_contact_details_enabled', $data ?? [], null);
        $this->setIfExists('ebay_motors_pro_shipping_method_enabled', $data ?? [], null);
        $this->setIfExists('ebay_motors_pro_street_count', $data ?? [], null);
        $this->setIfExists('epid_supported', $data ?? [], null);
        $this->setIfExists('k_type_supported', $data ?? [], null);
        $this->setIfExists('local_listing_distances', $data ?? [], null);
        $this->setIfExists('local_market_ad_format_enabled', $data ?? [], null);
        $this->setIfExists('local_market_auto_accept_enabled', $data ?? [], null);
        $this->setIfExists('local_market_auto_decline_enabled', $data ?? [], null);
        $this->setIfExists('local_market_best_offer_enabled', $data ?? [], null);
        $this->setIfExists('local_market_company_name_enabled', $data ?? [], null);
        $this->setIfExists('local_market_contact_by_address_enabled', $data ?? [], null);
        $this->setIfExists('local_market_contact_by_email_enabled', $data ?? [], null);
        $this->setIfExists('local_market_contact_by_phone_enabled', $data ?? [], null);
        $this->setIfExists('local_market_counter_offer_enabled', $data ?? [], null);
        $this->setIfExists('local_market_non_subscription', $data ?? [], null);
        $this->setIfExists('local_market_payment_method_check_out_enabled', $data ?? [], null);
        $this->setIfExists('local_market_phone_count', $data ?? [], null);
        $this->setIfExists('local_market_premium_subscription', $data ?? [], null);
        $this->setIfExists('local_market_regular_subscription', $data ?? [], null);
        $this->setIfExists('local_market_seller_contact_details_enabled', $data ?? [], null);
        $this->setIfExists('local_market_shipping_method_enabled', $data ?? [], null);
        $this->setIfExists('local_market_speciality_subscription', $data ?? [], null);
        $this->setIfExists('local_market_street_count', $data ?? [], null);
        $this->setIfExists('max_granular_fitment_count', $data ?? [], null);
        $this->setIfExists('max_item_compatibility', $data ?? [], null);
        $this->setIfExists('min_item_compatibility', $data ?? [], null);
        $this->setIfExists('non_subscription', $data ?? [], null);
        $this->setIfExists('premium_subscription', $data ?? [], null);
        $this->setIfExists('regular_subscription', $data ?? [], null);
        $this->setIfExists('seller_provided_title_supported', $data ?? [], null);
        $this->setIfExists('speciality_subscription', $data ?? [], null);
        $this->setIfExists('vin_supported', $data ?? [], null);
        $this->setIfExists('vrm_supported', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category_id
     *
     * @return string|null
     */
    public function getCategoryId(): ?string
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param string|null $category_id The unique identifier of the eBay leaf category for which metadata is being returned.
     *
     * @return $this
     */
    public function setCategoryId(?string $category_id): static
    {
        if (is_null($category_id)) {
            throw new InvalidArgumentException('non-nullable category_id cannot be null');
        }
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets category_tree_id
     *
     * @return string|null
     */
    public function getCategoryTreeId(): ?string
    {
        return $this->container['category_tree_id'];
    }

    /**
     * Sets category_tree_id
     *
     * @param string|null $category_tree_id The unique identifier of the category tree.
     *
     * @return $this
     */
    public function setCategoryTreeId(?string $category_tree_id): static
    {
        if (is_null($category_tree_id)) {
            throw new InvalidArgumentException('non-nullable category_tree_id cannot be null');
        }
        $this->container['category_tree_id'] = $category_tree_id;

        return $this;
    }

    /**
     * Gets deposit_supported
     *
     * @return bool|null
     */
    public function getDepositSupported(): ?bool
    {
        return $this->container['deposit_supported'];
    }

    /**
     * Sets deposit_supported
     *
     * @param bool|null $deposit_supported This field is returned as <code>true</code> if the corresponding category supports the use of a deposit/down payment on a motor vehicle listing. In an AddItem call, the seller can configure a down payment for a motor vehicle listing using the PaymentDetails container.
     *
     * @return $this
     */
    public function setDepositSupported(?bool $deposit_supported): static
    {
        if (is_null($deposit_supported)) {
            throw new InvalidArgumentException('non-nullable deposit_supported cannot be null');
        }
        $this->container['deposit_supported'] = $deposit_supported;

        return $this;
    }

    /**
     * Gets ebay_motors_pro_ad_format_enabled
     *
     * @return string|null
     */
    public function getEbayMotorsProAdFormatEnabled(): ?string
    {
        return $this->container['ebay_motors_pro_ad_format_enabled'];
    }

    /**
     * Sets ebay_motors_pro_ad_format_enabled
     *
     * @param string|null $ebay_motors_pro_ad_format_enabled Indicates whether or not eBay Motors Pro sellers can use classified ads in this category to sell their vehicles. This element is applicable for eBay Motors Pro users. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/metadata/types/sel:AdFormatEnabledEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setEbayMotorsProAdFormatEnabled(?string $ebay_motors_pro_ad_format_enabled): static
    {
        if (is_null($ebay_motors_pro_ad_format_enabled)) {
            throw new InvalidArgumentException('non-nullable ebay_motors_pro_ad_format_enabled cannot be null');
        }
        $this->container['ebay_motors_pro_ad_format_enabled'] = $ebay_motors_pro_ad_format_enabled;

        return $this;
    }

    /**
     * Gets ebay_motors_pro_auto_accept_enabled
     *
     * @return bool|null
     */
    public function getEbayMotorsProAutoAcceptEnabled(): ?bool
    {
        return $this->container['ebay_motors_pro_auto_accept_enabled'];
    }

    /**
     * Sets ebay_motors_pro_auto_accept_enabled
     *
     * @param bool|null $ebay_motors_pro_auto_accept_enabled Indicates whether or not the category supports the Best Offer Auto Accept feature for eBay Motors Pro listings. This element is for eBay Motors Pro users.
     *
     * @return $this
     */
    public function setEbayMotorsProAutoAcceptEnabled(?bool $ebay_motors_pro_auto_accept_enabled): static
    {
        if (is_null($ebay_motors_pro_auto_accept_enabled)) {
            throw new InvalidArgumentException('non-nullable ebay_motors_pro_auto_accept_enabled cannot be null');
        }
        $this->container['ebay_motors_pro_auto_accept_enabled'] = $ebay_motors_pro_auto_accept_enabled;

        return $this;
    }

    /**
     * Gets ebay_motors_pro_auto_decline_enabled
     *
     * @return bool|null
     */
    public function getEbayMotorsProAutoDeclineEnabled(): ?bool
    {
        return $this->container['ebay_motors_pro_auto_decline_enabled'];
    }

    /**
     * Sets ebay_motors_pro_auto_decline_enabled
     *
     * @param bool|null $ebay_motors_pro_auto_decline_enabled Indicates whether or not the category allows auto-decline for Best Offers for eBay Motors Classified Ad listings. This element is for eBay Motors Pro users.
     *
     * @return $this
     */
    public function setEbayMotorsProAutoDeclineEnabled(?bool $ebay_motors_pro_auto_decline_enabled): static
    {
        if (is_null($ebay_motors_pro_auto_decline_enabled)) {
            throw new InvalidArgumentException('non-nullable ebay_motors_pro_auto_decline_enabled cannot be null');
        }
        $this->container['ebay_motors_pro_auto_decline_enabled'] = $ebay_motors_pro_auto_decline_enabled;

        return $this;
    }

    /**
     * Gets ebay_motors_pro_best_offer_enabled
     *
     * @return string|null
     */
    public function getEbayMotorsProBestOfferEnabled(): ?string
    {
        return $this->container['ebay_motors_pro_best_offer_enabled'];
    }

    /**
     * Sets ebay_motors_pro_best_offer_enabled
     *
     * @param string|null $ebay_motors_pro_best_offer_enabled This enumerated value indicates whether or not Best Offer features are supported for eBay Motors Classified Ad listings in this category. This element is for eBay Motors Pro users. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/metadata/types/sel:ClassifiedAdBestOfferEnabledEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setEbayMotorsProBestOfferEnabled(?string $ebay_motors_pro_best_offer_enabled): static
    {
        if (is_null($ebay_motors_pro_best_offer_enabled)) {
            throw new InvalidArgumentException('non-nullable ebay_motors_pro_best_offer_enabled cannot be null');
        }
        $this->container['ebay_motors_pro_best_offer_enabled'] = $ebay_motors_pro_best_offer_enabled;

        return $this;
    }

    /**
     * Gets ebay_motors_pro_company_name_enabled
     *
     * @return bool|null
     */
    public function getEbayMotorsProCompanyNameEnabled(): ?bool
    {
        return $this->container['ebay_motors_pro_company_name_enabled'];
    }

    /**
     * Sets ebay_motors_pro_company_name_enabled
     *
     * @param bool|null $ebay_motors_pro_company_name_enabled Indicates whether this category supports including the company name in the seller's contact information. This element is for eBay Motors Pro users.
     *
     * @return $this
     */
    public function setEbayMotorsProCompanyNameEnabled(?bool $ebay_motors_pro_company_name_enabled): static
    {
        if (is_null($ebay_motors_pro_company_name_enabled)) {
            throw new InvalidArgumentException('non-nullable ebay_motors_pro_company_name_enabled cannot be null');
        }
        $this->container['ebay_motors_pro_company_name_enabled'] = $ebay_motors_pro_company_name_enabled;

        return $this;
    }

    /**
     * Gets ebay_motors_pro_contact_by_address_enabled
     *
     * @return bool|null
     */
    public function getEbayMotorsProContactByAddressEnabled(): ?bool
    {
        return $this->container['ebay_motors_pro_contact_by_address_enabled'];
    }

    /**
     * Sets ebay_motors_pro_contact_by_address_enabled
     *
     * @param bool|null $ebay_motors_pro_contact_by_address_enabled Indicates whether this category supports including the address in the seller's contact information. This element is for eBay Motors Pro users.
     *
     * @return $this
     */
    public function setEbayMotorsProContactByAddressEnabled(?bool $ebay_motors_pro_contact_by_address_enabled): static
    {
        if (is_null($ebay_motors_pro_contact_by_address_enabled)) {
            throw new InvalidArgumentException('non-nullable ebay_motors_pro_contact_by_address_enabled cannot be null');
        }
        $this->container['ebay_motors_pro_contact_by_address_enabled'] = $ebay_motors_pro_contact_by_address_enabled;

        return $this;
    }

    /**
     * Gets ebay_motors_pro_contact_by_email_enabled
     *
     * @return bool|null
     */
    public function getEbayMotorsProContactByEmailEnabled(): ?bool
    {
        return $this->container['ebay_motors_pro_contact_by_email_enabled'];
    }

    /**
     * Sets ebay_motors_pro_contact_by_email_enabled
     *
     * @param bool|null $ebay_motors_pro_contact_by_email_enabled Indicates whether this category supports including an email address in the seller's contact information. This element is for eBay Motors Pro users.
     *
     * @return $this
     */
    public function setEbayMotorsProContactByEmailEnabled(?bool $ebay_motors_pro_contact_by_email_enabled): static
    {
        if (is_null($ebay_motors_pro_contact_by_email_enabled)) {
            throw new InvalidArgumentException('non-nullable ebay_motors_pro_contact_by_email_enabled cannot be null');
        }
        $this->container['ebay_motors_pro_contact_by_email_enabled'] = $ebay_motors_pro_contact_by_email_enabled;

        return $this;
    }

    /**
     * Gets ebay_motors_pro_contact_by_phone_enabled
     *
     * @return bool|null
     */
    public function getEbayMotorsProContactByPhoneEnabled(): ?bool
    {
        return $this->container['ebay_motors_pro_contact_by_phone_enabled'];
    }

    /**
     * Sets ebay_motors_pro_contact_by_phone_enabled
     *
     * @param bool|null $ebay_motors_pro_contact_by_phone_enabled Indicates whether this category supports including the telephone in the seller's contact information. This element is for eBay Motors Pro users.
     *
     * @return $this
     */
    public function setEbayMotorsProContactByPhoneEnabled(?bool $ebay_motors_pro_contact_by_phone_enabled): static
    {
        if (is_null($ebay_motors_pro_contact_by_phone_enabled)) {
            throw new InvalidArgumentException('non-nullable ebay_motors_pro_contact_by_phone_enabled cannot be null');
        }
        $this->container['ebay_motors_pro_contact_by_phone_enabled'] = $ebay_motors_pro_contact_by_phone_enabled;

        return $this;
    }

    /**
     * Gets ebay_motors_pro_counter_offer_enabled
     *
     * @return bool|null
     */
    public function getEbayMotorsProCounterOfferEnabled(): ?bool
    {
        return $this->container['ebay_motors_pro_counter_offer_enabled'];
    }

    /**
     * Sets ebay_motors_pro_counter_offer_enabled
     *
     * @param bool|null $ebay_motors_pro_counter_offer_enabled Indicates whether counter offers are allowed on Best Offers for this category in an eBay Motors Classified Ad listing. This element is for eBay Motors Pro users.
     *
     * @return $this
     */
    public function setEbayMotorsProCounterOfferEnabled(?bool $ebay_motors_pro_counter_offer_enabled): static
    {
        if (is_null($ebay_motors_pro_counter_offer_enabled)) {
            throw new InvalidArgumentException('non-nullable ebay_motors_pro_counter_offer_enabled cannot be null');
        }
        $this->container['ebay_motors_pro_counter_offer_enabled'] = $ebay_motors_pro_counter_offer_enabled;

        return $this;
    }

    /**
     * Gets ebay_motors_pro_payment_method_check_out_enabled
     *
     * @return string|null
     */
    public function getEbayMotorsProPaymentMethodCheckOutEnabled(): ?string
    {
        return $this->container['ebay_motors_pro_payment_method_check_out_enabled'];
    }

    /**
     * Sets ebay_motors_pro_payment_method_check_out_enabled
     *
     * @param string|null $ebay_motors_pro_payment_method_check_out_enabled This enumerated value indicates whether this category supports that the payment method should be displayed to the user for this category in an eBay Motors Classified Ad listing. Even if enabled, checkout may or may not be enabled. This element is for eBay Motors Pro users. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/metadata/types/sel:ClassifiedAdPaymentMethodEnabledEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setEbayMotorsProPaymentMethodCheckOutEnabled(?string $ebay_motors_pro_payment_method_check_out_enabled): static
    {
        if (is_null($ebay_motors_pro_payment_method_check_out_enabled)) {
            throw new InvalidArgumentException('non-nullable ebay_motors_pro_payment_method_check_out_enabled cannot be null');
        }
        $this->container['ebay_motors_pro_payment_method_check_out_enabled'] = $ebay_motors_pro_payment_method_check_out_enabled;

        return $this;
    }

    /**
     * Gets ebay_motors_pro_phone_count
     *
     * @return int|null
     */
    public function getEbayMotorsProPhoneCount(): ?int
    {
        return $this->container['ebay_motors_pro_phone_count'];
    }

    /**
     * Sets ebay_motors_pro_phone_count
     *
     * @param int|null $ebay_motors_pro_phone_count Indicates the number of phone numbers that can be included through contact information for this category. This element is for eBay Motors Pro users.
     *
     * @return $this
     */
    public function setEbayMotorsProPhoneCount(?int $ebay_motors_pro_phone_count): static
    {
        if (is_null($ebay_motors_pro_phone_count)) {
            throw new InvalidArgumentException('non-nullable ebay_motors_pro_phone_count cannot be null');
        }
        $this->container['ebay_motors_pro_phone_count'] = $ebay_motors_pro_phone_count;

        return $this;
    }

    /**
     * Gets ebay_motors_pro_seller_contact_details_enabled
     *
     * @return bool|null
     */
    public function getEbayMotorsProSellerContactDetailsEnabled(): ?bool
    {
        return $this->container['ebay_motors_pro_seller_contact_details_enabled'];
    }

    /**
     * Sets ebay_motors_pro_seller_contact_details_enabled
     *
     * @param bool|null $ebay_motors_pro_seller_contact_details_enabled Indicates whether this category allows seller-level contact information for eBay Motors Classified Ad listings. A value of true means seller-level contact information is available for Classified Ad listings. This element is for eBay Motors Pro users.
     *
     * @return $this
     */
    public function setEbayMotorsProSellerContactDetailsEnabled(?bool $ebay_motors_pro_seller_contact_details_enabled): static
    {
        if (is_null($ebay_motors_pro_seller_contact_details_enabled)) {
            throw new InvalidArgumentException('non-nullable ebay_motors_pro_seller_contact_details_enabled cannot be null');
        }
        $this->container['ebay_motors_pro_seller_contact_details_enabled'] = $ebay_motors_pro_seller_contact_details_enabled;

        return $this;
    }

    /**
     * Gets ebay_motors_pro_shipping_method_enabled
     *
     * @return bool|null
     */
    public function getEbayMotorsProShippingMethodEnabled(): ?bool
    {
        return $this->container['ebay_motors_pro_shipping_method_enabled'];
    }

    /**
     * Sets ebay_motors_pro_shipping_method_enabled
     *
     * @param bool|null $ebay_motors_pro_shipping_method_enabled Indicates if shipping options should be displayed to the user for this category in an eBay Motors Classified Ad listing. This element is for eBay Motors Pro users.
     *
     * @return $this
     */
    public function setEbayMotorsProShippingMethodEnabled(?bool $ebay_motors_pro_shipping_method_enabled): static
    {
        if (is_null($ebay_motors_pro_shipping_method_enabled)) {
            throw new InvalidArgumentException('non-nullable ebay_motors_pro_shipping_method_enabled cannot be null');
        }
        $this->container['ebay_motors_pro_shipping_method_enabled'] = $ebay_motors_pro_shipping_method_enabled;

        return $this;
    }

    /**
     * Gets ebay_motors_pro_street_count
     *
     * @return int|null
     */
    public function getEbayMotorsProStreetCount(): ?int
    {
        return $this->container['ebay_motors_pro_street_count'];
    }

    /**
     * Sets ebay_motors_pro_street_count
     *
     * @param int|null $ebay_motors_pro_street_count This field indicates the number of street addresses allowed in contact information for this category. This element is for eBay Motors Pro users.
     *
     * @return $this
     */
    public function setEbayMotorsProStreetCount(?int $ebay_motors_pro_street_count): static
    {
        if (is_null($ebay_motors_pro_street_count)) {
            throw new InvalidArgumentException('non-nullable ebay_motors_pro_street_count cannot be null');
        }
        $this->container['ebay_motors_pro_street_count'] = $ebay_motors_pro_street_count;

        return $this;
    }

    /**
     * Gets epid_supported
     *
     * @return bool|null
     */
    public function getEpidSupported(): ?bool
    {
        return $this->container['epid_supported'];
    }

    /**
     * Sets epid_supported
     *
     * @param bool|null $epid_supported If returned as <code>true</code>, this indicates the category supports the use of an eBay Product ID (e.g. ePID) to identify which motorcycles and/or scooters are compatible with a motor vehicle part or accessory. ePIDs can only be used to identify motorcycles and scooters on the Germany and UK sites.
     *
     * @return $this
     */
    public function setEpidSupported(?bool $epid_supported): static
    {
        if (is_null($epid_supported)) {
            throw new InvalidArgumentException('non-nullable epid_supported cannot be null');
        }
        $this->container['epid_supported'] = $epid_supported;

        return $this;
    }

    /**
     * Gets k_type_supported
     *
     * @return bool|null
     */
    public function getKTypeSupported(): ?bool
    {
        return $this->container['k_type_supported'];
    }

    /**
     * Sets k_type_supported
     *
     * @param bool|null $k_type_supported This field indicates whether or not the category supports the use of a K type to identify the cars and trucks compatible with a motor vehicle part or accessory. Only the AU, DE, ES, FR, IT, and UK marketplaces support the use of K types. See <a href=\"/api-docs/user-guides/static/trading-user-guide/manually-specify-compatibility.html#ktype\" target=\"_blank\">Compatibility by K type</a> for more information
     *
     * @return $this
     */
    public function setKTypeSupported(?bool $k_type_supported): static
    {
        if (is_null($k_type_supported)) {
            throw new InvalidArgumentException('non-nullable k_type_supported cannot be null');
        }
        $this->container['k_type_supported'] = $k_type_supported;

        return $this;
    }

    /**
     * Gets local_listing_distances
     *
     * @return \eBay\Sell\Metadata\Model\LocalListingDistance[]|null
     */
    public function getLocalListingDistances(): ?array
    {
        return $this->container['local_listing_distances'];
    }

    /**
     * Sets local_listing_distances
     *
     * @param \eBay\Sell\Metadata\Model\LocalListingDistance[]|null $local_listing_distances This array shows the supported distances (in miles) for different types of Local Market subscription types in this category. Motor vehicle listings will be shown to buyers located within these proximities of the vehicle's location.
     *
     * @return $this
     */
    public function setLocalListingDistances(?array $local_listing_distances): static
    {
        if (is_null($local_listing_distances)) {
            throw new InvalidArgumentException('non-nullable local_listing_distances cannot be null');
        }
        $this->container['local_listing_distances'] = $local_listing_distances;

        return $this;
    }

    /**
     * Gets local_market_ad_format_enabled
     *
     * @return string|null
     */
    public function getLocalMarketAdFormatEnabled(): ?string
    {
        return $this->container['local_market_ad_format_enabled'];
    }

    /**
     * Sets local_market_ad_format_enabled
     *
     * @param string|null $local_market_ad_format_enabled Specifies whether this category supports Motor Local Market Classified Ad listings. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/metadata/types/sel:AdFormatEnabledEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setLocalMarketAdFormatEnabled(?string $local_market_ad_format_enabled): static
    {
        if (is_null($local_market_ad_format_enabled)) {
            throw new InvalidArgumentException('non-nullable local_market_ad_format_enabled cannot be null');
        }
        $this->container['local_market_ad_format_enabled'] = $local_market_ad_format_enabled;

        return $this;
    }

    /**
     * Gets local_market_auto_accept_enabled
     *
     * @return bool|null
     */
    public function getLocalMarketAutoAcceptEnabled(): ?bool
    {
        return $this->container['local_market_auto_accept_enabled'];
    }

    /**
     * Sets local_market_auto_accept_enabled
     *
     * @param bool|null $local_market_auto_accept_enabled Specifies whether this category supports auto-accept for Best Offers for Motors Local Market Classified Ads.
     *
     * @return $this
     */
    public function setLocalMarketAutoAcceptEnabled(?bool $local_market_auto_accept_enabled): static
    {
        if (is_null($local_market_auto_accept_enabled)) {
            throw new InvalidArgumentException('non-nullable local_market_auto_accept_enabled cannot be null');
        }
        $this->container['local_market_auto_accept_enabled'] = $local_market_auto_accept_enabled;

        return $this;
    }

    /**
     * Gets local_market_auto_decline_enabled
     *
     * @return bool|null
     */
    public function getLocalMarketAutoDeclineEnabled(): ?bool
    {
        return $this->container['local_market_auto_decline_enabled'];
    }

    /**
     * Sets local_market_auto_decline_enabled
     *
     * @param bool|null $local_market_auto_decline_enabled Specifies whether this category supports auto-decline for Best Offers for Motors Local Market Classified Ads.
     *
     * @return $this
     */
    public function setLocalMarketAutoDeclineEnabled(?bool $local_market_auto_decline_enabled): static
    {
        if (is_null($local_market_auto_decline_enabled)) {
            throw new InvalidArgumentException('non-nullable local_market_auto_decline_enabled cannot be null');
        }
        $this->container['local_market_auto_decline_enabled'] = $local_market_auto_decline_enabled;

        return $this;
    }

    /**
     * Gets local_market_best_offer_enabled
     *
     * @return string|null
     */
    public function getLocalMarketBestOfferEnabled(): ?string
    {
        return $this->container['local_market_best_offer_enabled'];
    }

    /**
     * Sets local_market_best_offer_enabled
     *
     * @param string|null $local_market_best_offer_enabled Indicates if Best Offer is enabled/required for Motors Local Market Classified Ad listings in this category.  For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/metadata/types/sel:ClassifiedAdBestOfferEnabledEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setLocalMarketBestOfferEnabled(?string $local_market_best_offer_enabled): static
    {
        if (is_null($local_market_best_offer_enabled)) {
            throw new InvalidArgumentException('non-nullable local_market_best_offer_enabled cannot be null');
        }
        $this->container['local_market_best_offer_enabled'] = $local_market_best_offer_enabled;

        return $this;
    }

    /**
     * Gets local_market_company_name_enabled
     *
     * @return bool|null
     */
    public function getLocalMarketCompanyNameEnabled(): ?bool
    {
        return $this->container['local_market_company_name_enabled'];
    }

    /**
     * Sets local_market_company_name_enabled
     *
     * @param bool|null $local_market_company_name_enabled Indicates whether the category supports the seller's company name being specified when using Motors Local Market classified ads.
     *
     * @return $this
     */
    public function setLocalMarketCompanyNameEnabled(?bool $local_market_company_name_enabled): static
    {
        if (is_null($local_market_company_name_enabled)) {
            throw new InvalidArgumentException('non-nullable local_market_company_name_enabled cannot be null');
        }
        $this->container['local_market_company_name_enabled'] = $local_market_company_name_enabled;

        return $this;
    }

    /**
     * Gets local_market_contact_by_address_enabled
     *
     * @return bool|null
     */
    public function getLocalMarketContactByAddressEnabled(): ?bool
    {
        return $this->container['local_market_contact_by_address_enabled'];
    }

    /**
     * Sets local_market_contact_by_address_enabled
     *
     * @param bool|null $local_market_contact_by_address_enabled Indicates whether this category supports including the address in the seller's contact information.
     *
     * @return $this
     */
    public function setLocalMarketContactByAddressEnabled(?bool $local_market_contact_by_address_enabled): static
    {
        if (is_null($local_market_contact_by_address_enabled)) {
            throw new InvalidArgumentException('non-nullable local_market_contact_by_address_enabled cannot be null');
        }
        $this->container['local_market_contact_by_address_enabled'] = $local_market_contact_by_address_enabled;

        return $this;
    }

    /**
     * Gets local_market_contact_by_email_enabled
     *
     * @return bool|null
     */
    public function getLocalMarketContactByEmailEnabled(): ?bool
    {
        return $this->container['local_market_contact_by_email_enabled'];
    }

    /**
     * Sets local_market_contact_by_email_enabled
     *
     * @param bool|null $local_market_contact_by_email_enabled Indicates whether the category supports including an email address in the seller's contact information.
     *
     * @return $this
     */
    public function setLocalMarketContactByEmailEnabled(?bool $local_market_contact_by_email_enabled): static
    {
        if (is_null($local_market_contact_by_email_enabled)) {
            throw new InvalidArgumentException('non-nullable local_market_contact_by_email_enabled cannot be null');
        }
        $this->container['local_market_contact_by_email_enabled'] = $local_market_contact_by_email_enabled;

        return $this;
    }

    /**
     * Gets local_market_contact_by_phone_enabled
     *
     * @return bool|null
     */
    public function getLocalMarketContactByPhoneEnabled(): ?bool
    {
        return $this->container['local_market_contact_by_phone_enabled'];
    }

    /**
     * Sets local_market_contact_by_phone_enabled
     *
     * @param bool|null $local_market_contact_by_phone_enabled Indicates whether this category supports including the telephone in the seller's contact information.
     *
     * @return $this
     */
    public function setLocalMarketContactByPhoneEnabled(?bool $local_market_contact_by_phone_enabled): static
    {
        if (is_null($local_market_contact_by_phone_enabled)) {
            throw new InvalidArgumentException('non-nullable local_market_contact_by_phone_enabled cannot be null');
        }
        $this->container['local_market_contact_by_phone_enabled'] = $local_market_contact_by_phone_enabled;

        return $this;
    }

    /**
     * Gets local_market_counter_offer_enabled
     *
     * @return bool|null
     */
    public function getLocalMarketCounterOfferEnabled(): ?bool
    {
        return $this->container['local_market_counter_offer_enabled'];
    }

    /**
     * Sets local_market_counter_offer_enabled
     *
     * @param bool|null $local_market_counter_offer_enabled Indicates whether counter offers are allowed on Best Offers for this category for Motors Local Market Classified Ad listings.
     *
     * @return $this
     */
    public function setLocalMarketCounterOfferEnabled(?bool $local_market_counter_offer_enabled): static
    {
        if (is_null($local_market_counter_offer_enabled)) {
            throw new InvalidArgumentException('non-nullable local_market_counter_offer_enabled cannot be null');
        }
        $this->container['local_market_counter_offer_enabled'] = $local_market_counter_offer_enabled;

        return $this;
    }

    /**
     * Gets local_market_non_subscription
     *
     * @return bool|null
     */
    public function getLocalMarketNonSubscription(): ?bool
    {
        return $this->container['local_market_non_subscription'];
    }

    /**
     * Sets local_market_non_subscription
     *
     * @param bool|null $local_market_non_subscription Indicates whether the category supports a seller creating a Motors Local Market listing without a subscription. This feature is only available to licensed vehicle dealers.
     *
     * @return $this
     */
    public function setLocalMarketNonSubscription(?bool $local_market_non_subscription): static
    {
        if (is_null($local_market_non_subscription)) {
            throw new InvalidArgumentException('non-nullable local_market_non_subscription cannot be null');
        }
        $this->container['local_market_non_subscription'] = $local_market_non_subscription;

        return $this;
    }

    /**
     * Gets local_market_payment_method_check_out_enabled
     *
     * @return string|null
     */
    public function getLocalMarketPaymentMethodCheckOutEnabled(): ?string
    {
        return $this->container['local_market_payment_method_check_out_enabled'];
    }

    /**
     * Sets local_market_payment_method_check_out_enabled
     *
     * @param string|null $local_market_payment_method_check_out_enabled Indicates if the payment method should be displayed to the user for this category in an Motors Local Market Classified Ad listing. Even if enabled, checkout may or may not be enabled. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/metadata/types/sel:ClassifiedAdPaymentMethodEnabledEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setLocalMarketPaymentMethodCheckOutEnabled(?string $local_market_payment_method_check_out_enabled): static
    {
        if (is_null($local_market_payment_method_check_out_enabled)) {
            throw new InvalidArgumentException('non-nullable local_market_payment_method_check_out_enabled cannot be null');
        }
        $this->container['local_market_payment_method_check_out_enabled'] = $local_market_payment_method_check_out_enabled;

        return $this;
    }

    /**
     * Gets local_market_phone_count
     *
     * @return int|null
     */
    public function getLocalMarketPhoneCount(): ?int
    {
        return $this->container['local_market_phone_count'];
    }

    /**
     * Sets local_market_phone_count
     *
     * @param int|null $local_market_phone_count Indicates the number of phone numbers that can be included through contact information for this category.
     *
     * @return $this
     */
    public function setLocalMarketPhoneCount(?int $local_market_phone_count): static
    {
        if (is_null($local_market_phone_count)) {
            throw new InvalidArgumentException('non-nullable local_market_phone_count cannot be null');
        }
        $this->container['local_market_phone_count'] = $local_market_phone_count;

        return $this;
    }

    /**
     * Gets local_market_premium_subscription
     *
     * @return bool|null
     */
    public function getLocalMarketPremiumSubscription(): ?bool
    {
        return $this->container['local_market_premium_subscription'];
    }

    /**
     * Sets local_market_premium_subscription
     *
     * @param bool|null $local_market_premium_subscription Indicates whether the category supports the Premium level subscription Motors Local Market listings. This feature is only available to licensed vehicle dealers.
     *
     * @return $this
     */
    public function setLocalMarketPremiumSubscription(?bool $local_market_premium_subscription): static
    {
        if (is_null($local_market_premium_subscription)) {
            throw new InvalidArgumentException('non-nullable local_market_premium_subscription cannot be null');
        }
        $this->container['local_market_premium_subscription'] = $local_market_premium_subscription;

        return $this;
    }

    /**
     * Gets local_market_regular_subscription
     *
     * @return bool|null
     */
    public function getLocalMarketRegularSubscription(): ?bool
    {
        return $this->container['local_market_regular_subscription'];
    }

    /**
     * Sets local_market_regular_subscription
     *
     * @param bool|null $local_market_regular_subscription Indicates whether the category supports the Regular level subscription to Motors Local Market listings. This feature is only available to licensed vehicle dealers.
     *
     * @return $this
     */
    public function setLocalMarketRegularSubscription(?bool $local_market_regular_subscription): static
    {
        if (is_null($local_market_regular_subscription)) {
            throw new InvalidArgumentException('non-nullable local_market_regular_subscription cannot be null');
        }
        $this->container['local_market_regular_subscription'] = $local_market_regular_subscription;

        return $this;
    }

    /**
     * Gets local_market_seller_contact_details_enabled
     *
     * @return bool|null
     */
    public function getLocalMarketSellerContactDetailsEnabled(): ?bool
    {
        return $this->container['local_market_seller_contact_details_enabled'];
    }

    /**
     * Sets local_market_seller_contact_details_enabled
     *
     * @param bool|null $local_market_seller_contact_details_enabled Specifies the whether this category allows seller-level contact information for Motors Local Market Classified Ad listings.
     *
     * @return $this
     */
    public function setLocalMarketSellerContactDetailsEnabled(?bool $local_market_seller_contact_details_enabled): static
    {
        if (is_null($local_market_seller_contact_details_enabled)) {
            throw new InvalidArgumentException('non-nullable local_market_seller_contact_details_enabled cannot be null');
        }
        $this->container['local_market_seller_contact_details_enabled'] = $local_market_seller_contact_details_enabled;

        return $this;
    }

    /**
     * Gets local_market_shipping_method_enabled
     *
     * @return bool|null
     */
    public function getLocalMarketShippingMethodEnabled(): ?bool
    {
        return $this->container['local_market_shipping_method_enabled'];
    }

    /**
     * Sets local_market_shipping_method_enabled
     *
     * @param bool|null $local_market_shipping_method_enabled Indicates if shipping methods should be displayed to the user for this category in an Motors Local Market Classified Ad listing. Even if enabled, checkout may or may not be enabled.
     *
     * @return $this
     */
    public function setLocalMarketShippingMethodEnabled(?bool $local_market_shipping_method_enabled): static
    {
        if (is_null($local_market_shipping_method_enabled)) {
            throw new InvalidArgumentException('non-nullable local_market_shipping_method_enabled cannot be null');
        }
        $this->container['local_market_shipping_method_enabled'] = $local_market_shipping_method_enabled;

        return $this;
    }

    /**
     * Gets local_market_speciality_subscription
     *
     * @return bool|null
     */
    public function getLocalMarketSpecialitySubscription(): ?bool
    {
        return $this->container['local_market_speciality_subscription'];
    }

    /**
     * Sets local_market_speciality_subscription
     *
     * @param bool|null $local_market_speciality_subscription Indicates whether the category supports the Speciality level subscription to Motors Local Market listings. This feature is only available to licensed vehicle dealers.
     *
     * @return $this
     */
    public function setLocalMarketSpecialitySubscription(?bool $local_market_speciality_subscription): static
    {
        if (is_null($local_market_speciality_subscription)) {
            throw new InvalidArgumentException('non-nullable local_market_speciality_subscription cannot be null');
        }
        $this->container['local_market_speciality_subscription'] = $local_market_speciality_subscription;

        return $this;
    }

    /**
     * Gets local_market_street_count
     *
     * @return int|null
     */
    public function getLocalMarketStreetCount(): ?int
    {
        return $this->container['local_market_street_count'];
    }

    /**
     * Sets local_market_street_count
     *
     * @param int|null $local_market_street_count Indicates which address option is enabled for the seller's contact information.
     *
     * @return $this
     */
    public function setLocalMarketStreetCount(?int $local_market_street_count): static
    {
        if (is_null($local_market_street_count)) {
            throw new InvalidArgumentException('non-nullable local_market_street_count cannot be null');
        }
        $this->container['local_market_street_count'] = $local_market_street_count;

        return $this;
    }

    /**
     * Gets max_granular_fitment_count
     *
     * @return int|null
     */
    public function getMaxGranularFitmentCount(): ?int
    {
        return $this->container['max_granular_fitment_count'];
    }

    /**
     * Sets max_granular_fitment_count
     *
     * @param int|null $max_granular_fitment_count Indicates the maximum number of compatible applications allowed per item when adding or revising items with compatibilities provided at the most detailed granularity. For example, in Car and Truck Parts on the US site, the most granular application would include Year, Make, Model, Trim, and Engine.
     *
     * @return $this
     */
    public function setMaxGranularFitmentCount(?int $max_granular_fitment_count): static
    {
        if (is_null($max_granular_fitment_count)) {
            throw new InvalidArgumentException('non-nullable max_granular_fitment_count cannot be null');
        }
        $this->container['max_granular_fitment_count'] = $max_granular_fitment_count;

        return $this;
    }

    /**
     * Gets max_item_compatibility
     *
     * @return int|null
     */
    public function getMaxItemCompatibility(): ?int
    {
        return $this->container['max_item_compatibility'];
    }

    /**
     * Sets max_item_compatibility
     *
     * @param int|null $max_item_compatibility Indicates the maximum number of compatible applications allowed per item when adding or revising items. This is relevant for specifying parts compatibility by application manually only. See <a href=\"/api-docs/user-guides/static/trading-user-guide/manually-specify-compatibility.html\" target=\"_blank\">Specify parts compatibility manually</a> and <a href=\"/api-docs/sell/static/inventory/managing-product-compatibility.html\" target=\"_blank\">Managing product compatibility</a> for more information.
     *
     * @return $this
     */
    public function setMaxItemCompatibility(?int $max_item_compatibility): static
    {
        if (is_null($max_item_compatibility)) {
            throw new InvalidArgumentException('non-nullable max_item_compatibility cannot be null');
        }
        $this->container['max_item_compatibility'] = $max_item_compatibility;

        return $this;
    }

    /**
     * Gets min_item_compatibility
     *
     * @return int|null
     */
    public function getMinItemCompatibility(): ?int
    {
        return $this->container['min_item_compatibility'];
    }

    /**
     * Sets min_item_compatibility
     *
     * @param int|null $min_item_compatibility Indicates the minimum number of required compatible applications for listing items. A value of <code>0</code> indicates it is not mandatory to specify parts compatibilities when listing.
     *
     * @return $this
     */
    public function setMinItemCompatibility(?int $min_item_compatibility): static
    {
        if (is_null($min_item_compatibility)) {
            throw new InvalidArgumentException('non-nullable min_item_compatibility cannot be null');
        }
        $this->container['min_item_compatibility'] = $min_item_compatibility;

        return $this;
    }

    /**
     * Gets non_subscription
     *
     * @return string|null
     */
    public function getNonSubscription(): ?string
    {
        return $this->container['non_subscription'];
    }

    /**
     * Sets non_subscription
     *
     * @param string|null $non_subscription The value in this field indicates whether the category supports Motors Local Market listings if the seller does not have a vehicle subscription. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/metadata/types/sel:GeographicExposureEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setNonSubscription(?string $non_subscription): static
    {
        if (is_null($non_subscription)) {
            throw new InvalidArgumentException('non-nullable non_subscription cannot be null');
        }
        $this->container['non_subscription'] = $non_subscription;

        return $this;
    }

    /**
     * Gets premium_subscription
     *
     * @return string|null
     */
    public function getPremiumSubscription(): ?string
    {
        return $this->container['premium_subscription'];
    }

    /**
     * Sets premium_subscription
     *
     * @param string|null $premium_subscription The value in this field indicates whether the category supports Motors Local Market listings if the seller has a Premium vehicle subscription. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/metadata/types/sel:GeographicExposureEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setPremiumSubscription(?string $premium_subscription): static
    {
        if (is_null($premium_subscription)) {
            throw new InvalidArgumentException('non-nullable premium_subscription cannot be null');
        }
        $this->container['premium_subscription'] = $premium_subscription;

        return $this;
    }

    /**
     * Gets regular_subscription
     *
     * @return string|null
     */
    public function getRegularSubscription(): ?string
    {
        return $this->container['regular_subscription'];
    }

    /**
     * Sets regular_subscription
     *
     * @param string|null $regular_subscription The value in this field indicates whether the category supports Motors Local Market listings if the seller has a Regular vehicle subscription. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/metadata/types/sel:GeographicExposureEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setRegularSubscription(?string $regular_subscription): static
    {
        if (is_null($regular_subscription)) {
            throw new InvalidArgumentException('non-nullable regular_subscription cannot be null');
        }
        $this->container['regular_subscription'] = $regular_subscription;

        return $this;
    }

    /**
     * Gets seller_provided_title_supported
     *
     * @return bool|null
     */
    public function getSellerProvidedTitleSupported(): ?bool
    {
        return $this->container['seller_provided_title_supported'];
    }

    /**
     * Sets seller_provided_title_supported
     *
     * @param bool|null $seller_provided_title_supported This field is returned as <code>true</code> if the corresponding category supports the use of a seller-provided title for a motor vehicle listing on the US or Canada Motors marketplaces. A seller-provided title is a descriptive title, given by the seller, that appears below eBay's pre-filled listing title for the motor vehicle. Visually, the seller-provided title is similar to a subtitle on other types of eBay listings (non-vehicle). A seller-provided title can assist in helping buyers discover the vehicle.
     *
     * @return $this
     */
    public function setSellerProvidedTitleSupported(?bool $seller_provided_title_supported): static
    {
        if (is_null($seller_provided_title_supported)) {
            throw new InvalidArgumentException('non-nullable seller_provided_title_supported cannot be null');
        }
        $this->container['seller_provided_title_supported'] = $seller_provided_title_supported;

        return $this;
    }

    /**
     * Gets speciality_subscription
     *
     * @return string|null
     */
    public function getSpecialitySubscription(): ?string
    {
        return $this->container['speciality_subscription'];
    }

    /**
     * Sets speciality_subscription
     *
     * @param string|null $speciality_subscription The value in this field indicates whether the category supports Motors Local Market listings if the seller has a Specialty vehicle subscription. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/metadata/types/sel:GeographicExposureEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setSpecialitySubscription(?string $speciality_subscription): static
    {
        if (is_null($speciality_subscription)) {
            throw new InvalidArgumentException('non-nullable speciality_subscription cannot be null');
        }
        $this->container['speciality_subscription'] = $speciality_subscription;

        return $this;
    }

    /**
     * Gets vin_supported
     *
     * @return bool|null
     */
    public function getVinSupported(): ?bool
    {
        return $this->container['vin_supported'];
    }

    /**
     * Sets vin_supported
     *
     * @param bool|null $vin_supported Indicates if Vehicle Identification Number is supported.
     *
     * @return $this
     */
    public function setVinSupported(?bool $vin_supported): static
    {
        if (is_null($vin_supported)) {
            throw new InvalidArgumentException('non-nullable vin_supported cannot be null');
        }
        $this->container['vin_supported'] = $vin_supported;

        return $this;
    }

    /**
     * Gets vrm_supported
     *
     * @return bool|null
     */
    public function getVrmSupported(): ?bool
    {
        return $this->container['vrm_supported'];
    }

    /**
     * Sets vrm_supported
     *
     * @param bool|null $vrm_supported Indicates if Vehicle Registration Mark is supported.
     *
     * @return $this
     */
    public function setVrmSupported(?bool $vrm_supported): static
    {
        if (is_null($vrm_supported)) {
            throw new InvalidArgumentException('non-nullable vrm_supported cannot be null');
        }
        $this->container['vrm_supported'] = $vrm_supported;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


