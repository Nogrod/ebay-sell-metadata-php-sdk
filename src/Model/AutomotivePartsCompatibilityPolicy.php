<?php

/**
 * AutomotivePartsCompatibilityPolicy
 *
 * PHP version 8.1
 *
 * @package  eBay\Sell\Metadata
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Metadata API
 *
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.11.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eBay\Sell\Metadata\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use eBay\Sell\Metadata\ObjectSerializer;

/**
 * AutomotivePartsCompatibilityPolicy Class Doc Comment
 *
 * @package  eBay\Sell\Metadata
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class AutomotivePartsCompatibilityPolicy implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'AutomotivePartsCompatibilityPolicy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'category_id' => 'string',
        'category_tree_id' => 'string',
        'compatibility_based_on' => 'string',
        'compatible_vehicle_types' => 'string[]',
        'max_number_of_compatible_vehicles' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'category_id' => null,
        'category_tree_id' => null,
        'compatibility_based_on' => null,
        'compatible_vehicle_types' => null,
        'max_number_of_compatible_vehicles' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'category_id' => false,
        'category_tree_id' => false,
        'compatibility_based_on' => false,
        'compatible_vehicle_types' => false,
        'max_number_of_compatible_vehicles' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'category_id' => 'categoryId',
        'category_tree_id' => 'categoryTreeId',
        'compatibility_based_on' => 'compatibilityBasedOn',
        'compatible_vehicle_types' => 'compatibleVehicleTypes',
        'max_number_of_compatible_vehicles' => 'maxNumberOfCompatibleVehicles'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'category_id' => 'setCategoryId',
        'category_tree_id' => 'setCategoryTreeId',
        'compatibility_based_on' => 'setCompatibilityBasedOn',
        'compatible_vehicle_types' => 'setCompatibleVehicleTypes',
        'max_number_of_compatible_vehicles' => 'setMaxNumberOfCompatibleVehicles'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'category_id' => 'getCategoryId',
        'category_tree_id' => 'getCategoryTreeId',
        'compatibility_based_on' => 'getCompatibilityBasedOn',
        'compatible_vehicle_types' => 'getCompatibleVehicleTypes',
        'max_number_of_compatible_vehicles' => 'getMaxNumberOfCompatibleVehicles'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('category_id', $data ?? [], null);
        $this->setIfExists('category_tree_id', $data ?? [], null);
        $this->setIfExists('compatibility_based_on', $data ?? [], null);
        $this->setIfExists('compatible_vehicle_types', $data ?? [], null);
        $this->setIfExists('max_number_of_compatible_vehicles', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category_id
     *
     * @return string|null
     */
    public function getCategoryId(): ?string
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param string|null $category_id The category ID to which the automotive parts compatibility policies apply.
     *
     * @return $this
     */
    public function setCategoryId(?string $category_id): static
    {
        if (is_null($category_id)) {
            throw new InvalidArgumentException('non-nullable category_id cannot be null');
        }
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets category_tree_id
     *
     * @return string|null
     */
    public function getCategoryTreeId(): ?string
    {
        return $this->container['category_tree_id'];
    }

    /**
     * Sets category_tree_id
     *
     * @param string|null $category_tree_id A value that indicates the root node of the category tree used for the response set. Each marketplace is based on a category tree whose root node is indicated by this unique category ID value. All category policy information returned by this call pertains to the categories included below this root node of the tree.    <br><br>A <i>category tree</i> is a hierarchical framework of eBay categories that begins at the root node of the tree and extends to include all the child nodes in the tree. Each child node in the tree is an eBay category that is represented by a unique <b>categoryId</b> value. Within a category tree, the root node has no parent node and <i>leaf nodes</i> are nodes that have no child nodes.
     *
     * @return $this
     */
    public function setCategoryTreeId(?string $category_tree_id): static
    {
        if (is_null($category_tree_id)) {
            throw new InvalidArgumentException('non-nullable category_tree_id cannot be null');
        }
        $this->container['category_tree_id'] = $category_tree_id;

        return $this;
    }

    /**
     * Gets compatibility_based_on
     *
     * @return string|null
     */
    public function getCompatibilityBasedOn(): ?string
    {
        return $this->container['compatibility_based_on'];
    }

    /**
     * Sets compatibility_based_on
     *
     * @param string|null $compatibility_based_on Indicates whether the category supports parts compatibility by either <code>ASSEMBLY</code> or by <code>SPECIFICATION</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/metadata/types/sel:CompatibilityTypeEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setCompatibilityBasedOn(?string $compatibility_based_on): static
    {
        if (is_null($compatibility_based_on)) {
            throw new InvalidArgumentException('non-nullable compatibility_based_on cannot be null');
        }
        $this->container['compatibility_based_on'] = $compatibility_based_on;

        return $this;
    }

    /**
     * Gets compatible_vehicle_types
     *
     * @return string[]|null
     */
    public function getCompatibleVehicleTypes(): ?array
    {
        return $this->container['compatible_vehicle_types'];
    }

    /**
     * Sets compatible_vehicle_types
     *
     * @param string[]|null $compatible_vehicle_types Indicates the compatibility classification of the part based on high-level vehicle types.
     *
     * @return $this
     */
    public function setCompatibleVehicleTypes(?array $compatible_vehicle_types): static
    {
        if (is_null($compatible_vehicle_types)) {
            throw new InvalidArgumentException('non-nullable compatible_vehicle_types cannot be null');
        }
        $this->container['compatible_vehicle_types'] = $compatible_vehicle_types;

        return $this;
    }

    /**
     * Gets max_number_of_compatible_vehicles
     *
     * @return int|null
     */
    public function getMaxNumberOfCompatibleVehicles(): ?int
    {
        return $this->container['max_number_of_compatible_vehicles'];
    }

    /**
     * Sets max_number_of_compatible_vehicles
     *
     * @param int|null $max_number_of_compatible_vehicles Specifies the maximum number of compatible vehicle-applications allowed per item.
     *
     * @return $this
     */
    public function setMaxNumberOfCompatibleVehicles(?int $max_number_of_compatible_vehicles): static
    {
        if (is_null($max_number_of_compatible_vehicles)) {
            throw new InvalidArgumentException('non-nullable max_number_of_compatible_vehicles cannot be null');
        }
        $this->container['max_number_of_compatible_vehicles'] = $max_number_of_compatible_vehicles;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


