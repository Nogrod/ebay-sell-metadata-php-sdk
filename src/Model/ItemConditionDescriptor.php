<?php

/**
 * ItemConditionDescriptor
 *
 * PHP version 8.1
 *
 * @package  eBay\Sell\Metadata
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Metadata API
 *
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.11.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eBay\Sell\Metadata\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use eBay\Sell\Metadata\ObjectSerializer;

/**
 * ItemConditionDescriptor Class Doc Comment
 *
 * @description This type is used to display the possible condition descriptors and condition values applicable for a specified category. It also returns usage requirements, maximum length, cardinality, and help text.
 * @package  eBay\Sell\Metadata
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ItemConditionDescriptor implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ItemConditionDescriptor';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'condition_descriptor_constraint' => '\eBay\Sell\Metadata\Model\ItemConditionDescriptorConstraint',
        'condition_descriptor_help_text' => 'string',
        'condition_descriptor_id' => 'string',
        'condition_descriptor_name' => 'string',
        'condition_descriptor_values' => '\eBay\Sell\Metadata\Model\ItemConditionDescriptorValue[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'condition_descriptor_constraint' => null,
        'condition_descriptor_help_text' => null,
        'condition_descriptor_id' => null,
        'condition_descriptor_name' => null,
        'condition_descriptor_values' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'condition_descriptor_constraint' => false,
        'condition_descriptor_help_text' => false,
        'condition_descriptor_id' => false,
        'condition_descriptor_name' => false,
        'condition_descriptor_values' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'condition_descriptor_constraint' => 'conditionDescriptorConstraint',
        'condition_descriptor_help_text' => 'conditionDescriptorHelpText',
        'condition_descriptor_id' => 'conditionDescriptorId',
        'condition_descriptor_name' => 'conditionDescriptorName',
        'condition_descriptor_values' => 'conditionDescriptorValues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'condition_descriptor_constraint' => 'setConditionDescriptorConstraint',
        'condition_descriptor_help_text' => 'setConditionDescriptorHelpText',
        'condition_descriptor_id' => 'setConditionDescriptorId',
        'condition_descriptor_name' => 'setConditionDescriptorName',
        'condition_descriptor_values' => 'setConditionDescriptorValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'condition_descriptor_constraint' => 'getConditionDescriptorConstraint',
        'condition_descriptor_help_text' => 'getConditionDescriptorHelpText',
        'condition_descriptor_id' => 'getConditionDescriptorId',
        'condition_descriptor_name' => 'getConditionDescriptorName',
        'condition_descriptor_values' => 'getConditionDescriptorValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('condition_descriptor_constraint', $data ?? [], null);
        $this->setIfExists('condition_descriptor_help_text', $data ?? [], null);
        $this->setIfExists('condition_descriptor_id', $data ?? [], null);
        $this->setIfExists('condition_descriptor_name', $data ?? [], null);
        $this->setIfExists('condition_descriptor_values', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets condition_descriptor_constraint
     *
     * @return \eBay\Sell\Metadata\Model\ItemConditionDescriptorConstraint|null
     */
    public function getConditionDescriptorConstraint(): ?\eBay\Sell\Metadata\Model\ItemConditionDescriptorConstraint
    {
        return $this->container['condition_descriptor_constraint'];
    }

    /**
     * Sets condition_descriptor_constraint
     *
     * @param \eBay\Sell\Metadata\Model\ItemConditionDescriptorConstraint|null $condition_descriptor_constraint condition_descriptor_constraint
     *
     * @return $this
     */
    public function setConditionDescriptorConstraint(?\eBay\Sell\Metadata\Model\ItemConditionDescriptorConstraint $condition_descriptor_constraint): static
    {
        if (is_null($condition_descriptor_constraint)) {
            throw new InvalidArgumentException('non-nullable condition_descriptor_constraint cannot be null');
        }
        $this->container['condition_descriptor_constraint'] = $condition_descriptor_constraint;

        return $this;
    }

    /**
     * Gets condition_descriptor_help_text
     *
     * @return string|null
     */
    public function getConditionDescriptorHelpText(): ?string
    {
        return $this->container['condition_descriptor_help_text'];
    }

    /**
     * Sets condition_descriptor_help_text
     *
     * @param string|null $condition_descriptor_help_text A description of the condition descriptor that directs a user to its condition descriptor values.<br><br> For example, the help text for <code>Card Condition</code> is <code>Select ungraded condition</code>.
     *
     * @return $this
     */
    public function setConditionDescriptorHelpText(?string $condition_descriptor_help_text): static
    {
        if (is_null($condition_descriptor_help_text)) {
            throw new InvalidArgumentException('non-nullable condition_descriptor_help_text cannot be null');
        }
        $this->container['condition_descriptor_help_text'] = $condition_descriptor_help_text;

        return $this;
    }

    /**
     * Gets condition_descriptor_id
     *
     * @return string|null
     */
    public function getConditionDescriptorId(): ?string
    {
        return $this->container['condition_descriptor_id'];
    }

    /**
     * Sets condition_descriptor_id
     *
     * @param string|null $condition_descriptor_id The unique identification number of a condition descriptor associated with with a <b>conditionDescriptorName</b>. <br><br>For example, <code>40001</code> is the ID for <code>Card Condition</code>.<br><br>These IDs are used in the addItem family of calls of the <b>Trading API</b> to provide condition descriptor names for the item. These IDs are used by the inventoryItem family of calls of the <b>Inventory API</b> to provide condition descriptor names for the item.
     *
     * @return $this
     */
    public function setConditionDescriptorId(?string $condition_descriptor_id): static
    {
        if (is_null($condition_descriptor_id)) {
            throw new InvalidArgumentException('non-nullable condition_descriptor_id cannot be null');
        }
        $this->container['condition_descriptor_id'] = $condition_descriptor_id;

        return $this;
    }

    /**
     * Gets condition_descriptor_name
     *
     * @return string|null
     */
    public function getConditionDescriptorName(): ?string
    {
        return $this->container['condition_descriptor_name'];
    }

    /**
     * Sets condition_descriptor_name
     *
     * @param string|null $condition_descriptor_name The human-readable label for the condition descriptor associated with the <b>conditionDescriptorID</b>. <br><br>For example, <code>Card Condition</code> is the condition descriptor name for ID <code>40001</code>
     *
     * @return $this
     */
    public function setConditionDescriptorName(?string $condition_descriptor_name): static
    {
        if (is_null($condition_descriptor_name)) {
            throw new InvalidArgumentException('non-nullable condition_descriptor_name cannot be null');
        }
        $this->container['condition_descriptor_name'] = $condition_descriptor_name;

        return $this;
    }

    /**
     * Gets condition_descriptor_values
     *
     * @return \eBay\Sell\Metadata\Model\ItemConditionDescriptorValue[]|null
     */
    public function getConditionDescriptorValues(): ?array
    {
        return $this->container['condition_descriptor_values'];
    }

    /**
     * Sets condition_descriptor_values
     *
     * @param \eBay\Sell\Metadata\Model\ItemConditionDescriptorValue[]|null $condition_descriptor_values This array shows the possible values that map to the corresponding <b>conditionDescriptorName</b> values. Constraint information and help text are also shown for each value. <br><br>For example, The ID <code>40001</code> is ID for the condition descriptor <code>card condition</code>. The ID <code>400012</code> is the ID for the <code>Very Good</code> card condition value.
     *
     * @return $this
     */
    public function setConditionDescriptorValues(?array $condition_descriptor_values): static
    {
        if (is_null($condition_descriptor_values)) {
            throw new InvalidArgumentException('non-nullable condition_descriptor_values cannot be null');
        }
        $this->container['condition_descriptor_values'] = $condition_descriptor_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


