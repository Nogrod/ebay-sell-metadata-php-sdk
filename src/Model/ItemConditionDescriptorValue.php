<?php

/**
 * ItemConditionDescriptorValue
 *
 * PHP version 8.1
 *
 * @package  eBay\Sell\Metadata
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Metadata API
 *
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.11.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eBay\Sell\Metadata\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use eBay\Sell\Metadata\ObjectSerializer;

/**
 * ItemConditionDescriptorValue Class Doc Comment
 *
 * @description This type displays the possible values for the corresponding condition descriptor, along with help text and constraint information.
 * @package  eBay\Sell\Metadata
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ItemConditionDescriptorValue implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ItemConditionDescriptorValue';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'condition_descriptor_value_additional_help_text' => 'string[]',
        'condition_descriptor_value_constraints' => '\eBay\Sell\Metadata\Model\ItemConditionDescriptorValueConstraint[]',
        'condition_descriptor_value_help_text' => 'string',
        'condition_descriptor_value_id' => 'string',
        'condition_descriptor_value_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'condition_descriptor_value_additional_help_text' => null,
        'condition_descriptor_value_constraints' => null,
        'condition_descriptor_value_help_text' => null,
        'condition_descriptor_value_id' => null,
        'condition_descriptor_value_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'condition_descriptor_value_additional_help_text' => false,
        'condition_descriptor_value_constraints' => false,
        'condition_descriptor_value_help_text' => false,
        'condition_descriptor_value_id' => false,
        'condition_descriptor_value_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'condition_descriptor_value_additional_help_text' => 'conditionDescriptorValueAdditionalHelpText',
        'condition_descriptor_value_constraints' => 'conditionDescriptorValueConstraints',
        'condition_descriptor_value_help_text' => 'conditionDescriptorValueHelpText',
        'condition_descriptor_value_id' => 'conditionDescriptorValueId',
        'condition_descriptor_value_name' => 'conditionDescriptorValueName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'condition_descriptor_value_additional_help_text' => 'setConditionDescriptorValueAdditionalHelpText',
        'condition_descriptor_value_constraints' => 'setConditionDescriptorValueConstraints',
        'condition_descriptor_value_help_text' => 'setConditionDescriptorValueHelpText',
        'condition_descriptor_value_id' => 'setConditionDescriptorValueId',
        'condition_descriptor_value_name' => 'setConditionDescriptorValueName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'condition_descriptor_value_additional_help_text' => 'getConditionDescriptorValueAdditionalHelpText',
        'condition_descriptor_value_constraints' => 'getConditionDescriptorValueConstraints',
        'condition_descriptor_value_help_text' => 'getConditionDescriptorValueHelpText',
        'condition_descriptor_value_id' => 'getConditionDescriptorValueId',
        'condition_descriptor_value_name' => 'getConditionDescriptorValueName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('condition_descriptor_value_additional_help_text', $data ?? [], null);
        $this->setIfExists('condition_descriptor_value_constraints', $data ?? [], null);
        $this->setIfExists('condition_descriptor_value_help_text', $data ?? [], null);
        $this->setIfExists('condition_descriptor_value_id', $data ?? [], null);
        $this->setIfExists('condition_descriptor_value_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets condition_descriptor_value_additional_help_text
     *
     * @return string[]|null
     */
    public function getConditionDescriptorValueAdditionalHelpText(): ?array
    {
        return $this->container['condition_descriptor_value_additional_help_text'];
    }

    /**
     * Sets condition_descriptor_value_additional_help_text
     *
     * @param string[]|null $condition_descriptor_value_additional_help_text Additional information about the the condition of the item that is not included in the <b>conditionDescriptorValueHelpText</b> field.
     *
     * @return $this
     */
    public function setConditionDescriptorValueAdditionalHelpText(?array $condition_descriptor_value_additional_help_text): static
    {
        if (is_null($condition_descriptor_value_additional_help_text)) {
            throw new InvalidArgumentException('non-nullable condition_descriptor_value_additional_help_text cannot be null');
        }
        $this->container['condition_descriptor_value_additional_help_text'] = $condition_descriptor_value_additional_help_text;

        return $this;
    }

    /**
     * Gets condition_descriptor_value_constraints
     *
     * @return \eBay\Sell\Metadata\Model\ItemConditionDescriptorValueConstraint[]|null
     */
    public function getConditionDescriptorValueConstraints(): ?array
    {
        return $this->container['condition_descriptor_value_constraints'];
    }

    /**
     * Sets condition_descriptor_value_constraints
     *
     * @param \eBay\Sell\Metadata\Model\ItemConditionDescriptorValueConstraint[]|null $condition_descriptor_value_constraints The constraints on a condition descriptor value, such as which descriptor value IDs and Descriptor ID it is associated with.
     *
     * @return $this
     */
    public function setConditionDescriptorValueConstraints(?array $condition_descriptor_value_constraints): static
    {
        if (is_null($condition_descriptor_value_constraints)) {
            throw new InvalidArgumentException('non-nullable condition_descriptor_value_constraints cannot be null');
        }
        $this->container['condition_descriptor_value_constraints'] = $condition_descriptor_value_constraints;

        return $this;
    }

    /**
     * Gets condition_descriptor_value_help_text
     *
     * @return string|null
     */
    public function getConditionDescriptorValueHelpText(): ?string
    {
        return $this->container['condition_descriptor_value_help_text'];
    }

    /**
     * Sets condition_descriptor_value_help_text
     *
     * @param string|null $condition_descriptor_value_help_text A detailed description of the condition descriptor value.
     *
     * @return $this
     */
    public function setConditionDescriptorValueHelpText(?string $condition_descriptor_value_help_text): static
    {
        if (is_null($condition_descriptor_value_help_text)) {
            throw new InvalidArgumentException('non-nullable condition_descriptor_value_help_text cannot be null');
        }
        $this->container['condition_descriptor_value_help_text'] = $condition_descriptor_value_help_text;

        return $this;
    }

    /**
     * Gets condition_descriptor_value_id
     *
     * @return string|null
     */
    public function getConditionDescriptorValueId(): ?string
    {
        return $this->container['condition_descriptor_value_id'];
    }

    /**
     * Sets condition_descriptor_value_id
     *
     * @param string|null $condition_descriptor_value_id The unique identification number of a condition descriptor value associated with the <b>conditionDescriptorValueName</b>.
     *
     * @return $this
     */
    public function setConditionDescriptorValueId(?string $condition_descriptor_value_id): static
    {
        if (is_null($condition_descriptor_value_id)) {
            throw new InvalidArgumentException('non-nullable condition_descriptor_value_id cannot be null');
        }
        $this->container['condition_descriptor_value_id'] = $condition_descriptor_value_id;

        return $this;
    }

    /**
     * Gets condition_descriptor_value_name
     *
     * @return string|null
     */
    public function getConditionDescriptorValueName(): ?string
    {
        return $this->container['condition_descriptor_value_name'];
    }

    /**
     * Sets condition_descriptor_value_name
     *
     * @param string|null $condition_descriptor_value_name The human-readable label for the condition descriptor value associated with the <b>conditionDescriptorValueID</b>.
     *
     * @return $this
     */
    public function setConditionDescriptorValueName(?string $condition_descriptor_value_name): static
    {
        if (is_null($condition_descriptor_value_name)) {
            throw new InvalidArgumentException('non-nullable condition_descriptor_value_name cannot be null');
        }
        $this->container['condition_descriptor_value_name'] = $condition_descriptor_value_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


