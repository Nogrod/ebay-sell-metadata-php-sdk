<?php

/**
 * ClassifiedAdPolicy
 *
 * PHP version 8.1
 *
 * @package  eBay\Sell\Metadata
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Metadata API
 *
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.11.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eBay\Sell\Metadata\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use eBay\Sell\Metadata\ObjectSerializer;

/**
 * ClassifiedAdPolicy Class Doc Comment
 *
 * @description This type provides fields that contains applicable Classified Ad policy metadata for the leaf categories returned for the marketplace.
 * @package  eBay\Sell\Metadata
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ClassifiedAdPolicy implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ClassifiedAdPolicy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'ad_format_enabled' => 'string',
        'category_id' => 'string',
        'category_tree_id' => 'string',
        'classified_ad_auto_accept_enabled' => 'bool',
        'classified_ad_auto_decline_enabled' => 'bool',
        'classified_ad_best_offer_enabled' => 'string',
        'classified_ad_company_name_enabled' => 'bool',
        'classified_ad_contact_by_address_enabled' => 'bool',
        'classified_ad_contact_by_email_enabled' => 'bool',
        'classified_ad_contact_by_phone_enabled' => 'bool',
        'classified_ad_counter_offer_enabled' => 'bool',
        'classified_ad_payment_method_enabled' => 'string',
        'classified_ad_phone_count' => 'int',
        'classified_ad_shipping_method_enabled' => 'bool',
        'classified_ad_street_count' => 'int',
        'seller_contact_details_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'ad_format_enabled' => null,
        'category_id' => null,
        'category_tree_id' => null,
        'classified_ad_auto_accept_enabled' => null,
        'classified_ad_auto_decline_enabled' => null,
        'classified_ad_best_offer_enabled' => null,
        'classified_ad_company_name_enabled' => null,
        'classified_ad_contact_by_address_enabled' => null,
        'classified_ad_contact_by_email_enabled' => null,
        'classified_ad_contact_by_phone_enabled' => null,
        'classified_ad_counter_offer_enabled' => null,
        'classified_ad_payment_method_enabled' => null,
        'classified_ad_phone_count' => 'int32',
        'classified_ad_shipping_method_enabled' => null,
        'classified_ad_street_count' => 'int32',
        'seller_contact_details_enabled' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'ad_format_enabled' => false,
        'category_id' => false,
        'category_tree_id' => false,
        'classified_ad_auto_accept_enabled' => false,
        'classified_ad_auto_decline_enabled' => false,
        'classified_ad_best_offer_enabled' => false,
        'classified_ad_company_name_enabled' => false,
        'classified_ad_contact_by_address_enabled' => false,
        'classified_ad_contact_by_email_enabled' => false,
        'classified_ad_contact_by_phone_enabled' => false,
        'classified_ad_counter_offer_enabled' => false,
        'classified_ad_payment_method_enabled' => false,
        'classified_ad_phone_count' => false,
        'classified_ad_shipping_method_enabled' => false,
        'classified_ad_street_count' => false,
        'seller_contact_details_enabled' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'ad_format_enabled' => 'adFormatEnabled',
        'category_id' => 'categoryId',
        'category_tree_id' => 'categoryTreeId',
        'classified_ad_auto_accept_enabled' => 'classifiedAdAutoAcceptEnabled',
        'classified_ad_auto_decline_enabled' => 'classifiedAdAutoDeclineEnabled',
        'classified_ad_best_offer_enabled' => 'classifiedAdBestOfferEnabled',
        'classified_ad_company_name_enabled' => 'classifiedAdCompanyNameEnabled',
        'classified_ad_contact_by_address_enabled' => 'classifiedAdContactByAddressEnabled',
        'classified_ad_contact_by_email_enabled' => 'classifiedAdContactByEmailEnabled',
        'classified_ad_contact_by_phone_enabled' => 'classifiedAdContactByPhoneEnabled',
        'classified_ad_counter_offer_enabled' => 'classifiedAdCounterOfferEnabled',
        'classified_ad_payment_method_enabled' => 'classifiedAdPaymentMethodEnabled',
        'classified_ad_phone_count' => 'classifiedAdPhoneCount',
        'classified_ad_shipping_method_enabled' => 'classifiedAdShippingMethodEnabled',
        'classified_ad_street_count' => 'classifiedAdStreetCount',
        'seller_contact_details_enabled' => 'sellerContactDetailsEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'ad_format_enabled' => 'setAdFormatEnabled',
        'category_id' => 'setCategoryId',
        'category_tree_id' => 'setCategoryTreeId',
        'classified_ad_auto_accept_enabled' => 'setClassifiedAdAutoAcceptEnabled',
        'classified_ad_auto_decline_enabled' => 'setClassifiedAdAutoDeclineEnabled',
        'classified_ad_best_offer_enabled' => 'setClassifiedAdBestOfferEnabled',
        'classified_ad_company_name_enabled' => 'setClassifiedAdCompanyNameEnabled',
        'classified_ad_contact_by_address_enabled' => 'setClassifiedAdContactByAddressEnabled',
        'classified_ad_contact_by_email_enabled' => 'setClassifiedAdContactByEmailEnabled',
        'classified_ad_contact_by_phone_enabled' => 'setClassifiedAdContactByPhoneEnabled',
        'classified_ad_counter_offer_enabled' => 'setClassifiedAdCounterOfferEnabled',
        'classified_ad_payment_method_enabled' => 'setClassifiedAdPaymentMethodEnabled',
        'classified_ad_phone_count' => 'setClassifiedAdPhoneCount',
        'classified_ad_shipping_method_enabled' => 'setClassifiedAdShippingMethodEnabled',
        'classified_ad_street_count' => 'setClassifiedAdStreetCount',
        'seller_contact_details_enabled' => 'setSellerContactDetailsEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'ad_format_enabled' => 'getAdFormatEnabled',
        'category_id' => 'getCategoryId',
        'category_tree_id' => 'getCategoryTreeId',
        'classified_ad_auto_accept_enabled' => 'getClassifiedAdAutoAcceptEnabled',
        'classified_ad_auto_decline_enabled' => 'getClassifiedAdAutoDeclineEnabled',
        'classified_ad_best_offer_enabled' => 'getClassifiedAdBestOfferEnabled',
        'classified_ad_company_name_enabled' => 'getClassifiedAdCompanyNameEnabled',
        'classified_ad_contact_by_address_enabled' => 'getClassifiedAdContactByAddressEnabled',
        'classified_ad_contact_by_email_enabled' => 'getClassifiedAdContactByEmailEnabled',
        'classified_ad_contact_by_phone_enabled' => 'getClassifiedAdContactByPhoneEnabled',
        'classified_ad_counter_offer_enabled' => 'getClassifiedAdCounterOfferEnabled',
        'classified_ad_payment_method_enabled' => 'getClassifiedAdPaymentMethodEnabled',
        'classified_ad_phone_count' => 'getClassifiedAdPhoneCount',
        'classified_ad_shipping_method_enabled' => 'getClassifiedAdShippingMethodEnabled',
        'classified_ad_street_count' => 'getClassifiedAdStreetCount',
        'seller_contact_details_enabled' => 'getSellerContactDetailsEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('ad_format_enabled', $data ?? [], null);
        $this->setIfExists('category_id', $data ?? [], null);
        $this->setIfExists('category_tree_id', $data ?? [], null);
        $this->setIfExists('classified_ad_auto_accept_enabled', $data ?? [], null);
        $this->setIfExists('classified_ad_auto_decline_enabled', $data ?? [], null);
        $this->setIfExists('classified_ad_best_offer_enabled', $data ?? [], null);
        $this->setIfExists('classified_ad_company_name_enabled', $data ?? [], null);
        $this->setIfExists('classified_ad_contact_by_address_enabled', $data ?? [], null);
        $this->setIfExists('classified_ad_contact_by_email_enabled', $data ?? [], null);
        $this->setIfExists('classified_ad_contact_by_phone_enabled', $data ?? [], null);
        $this->setIfExists('classified_ad_counter_offer_enabled', $data ?? [], null);
        $this->setIfExists('classified_ad_payment_method_enabled', $data ?? [], null);
        $this->setIfExists('classified_ad_phone_count', $data ?? [], null);
        $this->setIfExists('classified_ad_shipping_method_enabled', $data ?? [], null);
        $this->setIfExists('classified_ad_street_count', $data ?? [], null);
        $this->setIfExists('seller_contact_details_enabled', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ad_format_enabled
     *
     * @return string|null
     */
    public function getAdFormatEnabled(): ?string
    {
        return $this->container['ad_format_enabled'];
    }

    /**
     * Sets ad_format_enabled
     *
     * @param string|null $ad_format_enabled This enumerated value indicates the type or status of available Classified Ad formats for this category. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/metadata/types/sel:AdFormatEnabledEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setAdFormatEnabled(?string $ad_format_enabled): static
    {
        if (is_null($ad_format_enabled)) {
            throw new InvalidArgumentException('non-nullable ad_format_enabled cannot be null');
        }
        $this->container['ad_format_enabled'] = $ad_format_enabled;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return string|null
     */
    public function getCategoryId(): ?string
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param string|null $category_id The unique identifier of the eBay leaf category for which metadata is being returned.
     *
     * @return $this
     */
    public function setCategoryId(?string $category_id): static
    {
        if (is_null($category_id)) {
            throw new InvalidArgumentException('non-nullable category_id cannot be null');
        }
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets category_tree_id
     *
     * @return string|null
     */
    public function getCategoryTreeId(): ?string
    {
        return $this->container['category_tree_id'];
    }

    /**
     * Sets category_tree_id
     *
     * @param string|null $category_tree_id The unique identifier of the category tree.
     *
     * @return $this
     */
    public function setCategoryTreeId(?string $category_tree_id): static
    {
        if (is_null($category_tree_id)) {
            throw new InvalidArgumentException('non-nullable category_tree_id cannot be null');
        }
        $this->container['category_tree_id'] = $category_tree_id;

        return $this;
    }

    /**
     * Gets classified_ad_auto_accept_enabled
     *
     * @return bool|null
     */
    public function getClassifiedAdAutoAcceptEnabled(): ?bool
    {
        return $this->container['classified_ad_auto_accept_enabled'];
    }

    /**
     * Sets classified_ad_auto_accept_enabled
     *
     * @param bool|null $classified_ad_auto_accept_enabled Indicates whether the category supports the Best Offer Automatic Accept feature for Classified Ad listings.
     *
     * @return $this
     */
    public function setClassifiedAdAutoAcceptEnabled(?bool $classified_ad_auto_accept_enabled): static
    {
        if (is_null($classified_ad_auto_accept_enabled)) {
            throw new InvalidArgumentException('non-nullable classified_ad_auto_accept_enabled cannot be null');
        }
        $this->container['classified_ad_auto_accept_enabled'] = $classified_ad_auto_accept_enabled;

        return $this;
    }

    /**
     * Gets classified_ad_auto_decline_enabled
     *
     * @return bool|null
     */
    public function getClassifiedAdAutoDeclineEnabled(): ?bool
    {
        return $this->container['classified_ad_auto_decline_enabled'];
    }

    /**
     * Sets classified_ad_auto_decline_enabled
     *
     * @param bool|null $classified_ad_auto_decline_enabled Indicates whether the category supports the Best Offer Automatic Reject feature for Classified Ad listings.
     *
     * @return $this
     */
    public function setClassifiedAdAutoDeclineEnabled(?bool $classified_ad_auto_decline_enabled): static
    {
        if (is_null($classified_ad_auto_decline_enabled)) {
            throw new InvalidArgumentException('non-nullable classified_ad_auto_decline_enabled cannot be null');
        }
        $this->container['classified_ad_auto_decline_enabled'] = $classified_ad_auto_decline_enabled;

        return $this;
    }

    /**
     * Gets classified_ad_best_offer_enabled
     *
     * @return string|null
     */
    public function getClassifiedAdBestOfferEnabled(): ?string
    {
        return $this->container['classified_ad_best_offer_enabled'];
    }

    /**
     * Sets classified_ad_best_offer_enabled
     *
     * @param string|null $classified_ad_best_offer_enabled This enumerated value indicates if Best Offer is enabled, disabled, or required for Classified Ad listings in this category. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/metadata/types/sel:ClassifiedAdBestOfferEnabledEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setClassifiedAdBestOfferEnabled(?string $classified_ad_best_offer_enabled): static
    {
        if (is_null($classified_ad_best_offer_enabled)) {
            throw new InvalidArgumentException('non-nullable classified_ad_best_offer_enabled cannot be null');
        }
        $this->container['classified_ad_best_offer_enabled'] = $classified_ad_best_offer_enabled;

        return $this;
    }

    /**
     * Gets classified_ad_company_name_enabled
     *
     * @return bool|null
     */
    public function getClassifiedAdCompanyNameEnabled(): ?bool
    {
        return $this->container['classified_ad_company_name_enabled'];
    }

    /**
     * Sets classified_ad_company_name_enabled
     *
     * @param bool|null $classified_ad_company_name_enabled Indicates whether this category supports including a company name in the seller's contact information. This element is for <b>For Sale By Owner</b> listings.
     *
     * @return $this
     */
    public function setClassifiedAdCompanyNameEnabled(?bool $classified_ad_company_name_enabled): static
    {
        if (is_null($classified_ad_company_name_enabled)) {
            throw new InvalidArgumentException('non-nullable classified_ad_company_name_enabled cannot be null');
        }
        $this->container['classified_ad_company_name_enabled'] = $classified_ad_company_name_enabled;

        return $this;
    }

    /**
     * Gets classified_ad_contact_by_address_enabled
     *
     * @return bool|null
     */
    public function getClassifiedAdContactByAddressEnabled(): ?bool
    {
        return $this->container['classified_ad_contact_by_address_enabled'];
    }

    /**
     * Sets classified_ad_contact_by_address_enabled
     *
     * @param bool|null $classified_ad_contact_by_address_enabled Indicates whether this category supports including an address in the seller's contact information. This element is for <b>For Sale By Owner</b> listings.
     *
     * @return $this
     */
    public function setClassifiedAdContactByAddressEnabled(?bool $classified_ad_contact_by_address_enabled): static
    {
        if (is_null($classified_ad_contact_by_address_enabled)) {
            throw new InvalidArgumentException('non-nullable classified_ad_contact_by_address_enabled cannot be null');
        }
        $this->container['classified_ad_contact_by_address_enabled'] = $classified_ad_contact_by_address_enabled;

        return $this;
    }

    /**
     * Gets classified_ad_contact_by_email_enabled
     *
     * @return bool|null
     */
    public function getClassifiedAdContactByEmailEnabled(): ?bool
    {
        return $this->container['classified_ad_contact_by_email_enabled'];
    }

    /**
     * Sets classified_ad_contact_by_email_enabled
     *
     * @param bool|null $classified_ad_contact_by_email_enabled Indicates whether most categories support including an email address in the seller's contact information.
     *
     * @return $this
     */
    public function setClassifiedAdContactByEmailEnabled(?bool $classified_ad_contact_by_email_enabled): static
    {
        if (is_null($classified_ad_contact_by_email_enabled)) {
            throw new InvalidArgumentException('non-nullable classified_ad_contact_by_email_enabled cannot be null');
        }
        $this->container['classified_ad_contact_by_email_enabled'] = $classified_ad_contact_by_email_enabled;

        return $this;
    }

    /**
     * Gets classified_ad_contact_by_phone_enabled
     *
     * @return bool|null
     */
    public function getClassifiedAdContactByPhoneEnabled(): ?bool
    {
        return $this->container['classified_ad_contact_by_phone_enabled'];
    }

    /**
     * Sets classified_ad_contact_by_phone_enabled
     *
     * @param bool|null $classified_ad_contact_by_phone_enabled Indicates whether most categories support including a phone number in the seller's contact information.
     *
     * @return $this
     */
    public function setClassifiedAdContactByPhoneEnabled(?bool $classified_ad_contact_by_phone_enabled): static
    {
        if (is_null($classified_ad_contact_by_phone_enabled)) {
            throw new InvalidArgumentException('non-nullable classified_ad_contact_by_phone_enabled cannot be null');
        }
        $this->container['classified_ad_contact_by_phone_enabled'] = $classified_ad_contact_by_phone_enabled;

        return $this;
    }

    /**
     * Gets classified_ad_counter_offer_enabled
     *
     * @return bool|null
     */
    public function getClassifiedAdCounterOfferEnabled(): ?bool
    {
        return $this->container['classified_ad_counter_offer_enabled'];
    }

    /**
     * Sets classified_ad_counter_offer_enabled
     *
     * @param bool|null $classified_ad_counter_offer_enabled Indicates whether counter offers are allowed on Best offers for the category.
     *
     * @return $this
     */
    public function setClassifiedAdCounterOfferEnabled(?bool $classified_ad_counter_offer_enabled): static
    {
        if (is_null($classified_ad_counter_offer_enabled)) {
            throw new InvalidArgumentException('non-nullable classified_ad_counter_offer_enabled cannot be null');
        }
        $this->container['classified_ad_counter_offer_enabled'] = $classified_ad_counter_offer_enabled;

        return $this;
    }

    /**
     * Gets classified_ad_payment_method_enabled
     *
     * @return string|null
     */
    public function getClassifiedAdPaymentMethodEnabled(): ?string
    {
        return $this->container['classified_ad_payment_method_enabled'];
    }

    /**
     * Sets classified_ad_payment_method_enabled
     *
     * @param string|null $classified_ad_payment_method_enabled This enumerated value indicates support for the payment method being displayed to the user for the category. Even if enabled, checkout may or may not be enabled. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/metadata/types/sel:ClassifiedAdPaymentMethodEnabledEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setClassifiedAdPaymentMethodEnabled(?string $classified_ad_payment_method_enabled): static
    {
        if (is_null($classified_ad_payment_method_enabled)) {
            throw new InvalidArgumentException('non-nullable classified_ad_payment_method_enabled cannot be null');
        }
        $this->container['classified_ad_payment_method_enabled'] = $classified_ad_payment_method_enabled;

        return $this;
    }

    /**
     * Gets classified_ad_phone_count
     *
     * @return int|null
     */
    public function getClassifiedAdPhoneCount(): ?int
    {
        return $this->container['classified_ad_phone_count'];
    }

    /**
     * Sets classified_ad_phone_count
     *
     * @param int|null $classified_ad_phone_count Indicates how many contact phone numbers can be specified in contact information for the category. This element is for <b>For Sale By Owner</b> listings.
     *
     * @return $this
     */
    public function setClassifiedAdPhoneCount(?int $classified_ad_phone_count): static
    {
        if (is_null($classified_ad_phone_count)) {
            throw new InvalidArgumentException('non-nullable classified_ad_phone_count cannot be null');
        }
        $this->container['classified_ad_phone_count'] = $classified_ad_phone_count;

        return $this;
    }

    /**
     * Gets classified_ad_shipping_method_enabled
     *
     * @return bool|null
     */
    public function getClassifiedAdShippingMethodEnabled(): ?bool
    {
        return $this->container['classified_ad_shipping_method_enabled'];
    }

    /**
     * Sets classified_ad_shipping_method_enabled
     *
     * @param bool|null $classified_ad_shipping_method_enabled Indicates if shipping methods can be specified and displayed in the <b>View Item</b> page for the category.
     *
     * @return $this
     */
    public function setClassifiedAdShippingMethodEnabled(?bool $classified_ad_shipping_method_enabled): static
    {
        if (is_null($classified_ad_shipping_method_enabled)) {
            throw new InvalidArgumentException('non-nullable classified_ad_shipping_method_enabled cannot be null');
        }
        $this->container['classified_ad_shipping_method_enabled'] = $classified_ad_shipping_method_enabled;

        return $this;
    }

    /**
     * Gets classified_ad_street_count
     *
     * @return int|null
     */
    public function getClassifiedAdStreetCount(): ?int
    {
        return $this->container['classified_ad_street_count'];
    }

    /**
     * Sets classified_ad_street_count
     *
     * @param int|null $classified_ad_street_count Indicates how many street addresses can be specified in contact information for the category. This element is for <b>For Sale By Owner</b> listings.
     *
     * @return $this
     */
    public function setClassifiedAdStreetCount(?int $classified_ad_street_count): static
    {
        if (is_null($classified_ad_street_count)) {
            throw new InvalidArgumentException('non-nullable classified_ad_street_count cannot be null');
        }
        $this->container['classified_ad_street_count'] = $classified_ad_street_count;

        return $this;
    }

    /**
     * Gets seller_contact_details_enabled
     *
     * @return bool|null
     */
    public function getSellerContactDetailsEnabled(): ?bool
    {
        return $this->container['seller_contact_details_enabled'];
    }

    /**
     * Sets seller_contact_details_enabled
     *
     * @param bool|null $seller_contact_details_enabled Indicates whether this category supports seller-level contact information for Classified Ad listings.
     *
     * @return $this
     */
    public function setSellerContactDetailsEnabled(?bool $seller_contact_details_enabled): static
    {
        if (is_null($seller_contact_details_enabled)) {
            throw new InvalidArgumentException('non-nullable seller_contact_details_enabled cannot be null');
        }
        $this->container['seller_contact_details_enabled'] = $seller_contact_details_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


