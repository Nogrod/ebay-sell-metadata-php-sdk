<?php

/**
 * ProductRequest
 *
 * PHP version 8.1
 *
 * @package  eBay\Sell\Metadata
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Metadata API
 *
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.11.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eBay\Sell\Metadata\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use eBay\Sell\Metadata\ObjectSerializer;

/**
 * ProductRequest Class Doc Comment
 *
 * @description This type defines the request fields for the &lt;b&gt;getProductCompatibilities&lt;/b&gt; method.
 * @package  eBay\Sell\Metadata
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ProductRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ProductRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'application_property_filters' => '\eBay\Sell\Metadata\Model\PropertyFilterInner[]',
        'dataset' => 'string[]',
        'dataset_property_name' => 'string[]',
        'disabled_product_filter' => '\eBay\Sell\Metadata\Model\DisabledProductFilter',
        'pagination_input' => '\eBay\Sell\Metadata\Model\PaginationInput',
        'product_identifier' => '\eBay\Sell\Metadata\Model\ProductIdentifier',
        'sort_orders' => '\eBay\Sell\Metadata\Model\SortOrderInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'application_property_filters' => null,
        'dataset' => null,
        'dataset_property_name' => null,
        'disabled_product_filter' => null,
        'pagination_input' => null,
        'product_identifier' => null,
        'sort_orders' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'application_property_filters' => false,
        'dataset' => false,
        'dataset_property_name' => false,
        'disabled_product_filter' => false,
        'pagination_input' => false,
        'product_identifier' => false,
        'sort_orders' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'application_property_filters' => 'applicationPropertyFilters',
        'dataset' => 'dataset',
        'dataset_property_name' => 'datasetPropertyName',
        'disabled_product_filter' => 'disabledProductFilter',
        'pagination_input' => 'paginationInput',
        'product_identifier' => 'productIdentifier',
        'sort_orders' => 'sortOrders'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'application_property_filters' => 'setApplicationPropertyFilters',
        'dataset' => 'setDataset',
        'dataset_property_name' => 'setDatasetPropertyName',
        'disabled_product_filter' => 'setDisabledProductFilter',
        'pagination_input' => 'setPaginationInput',
        'product_identifier' => 'setProductIdentifier',
        'sort_orders' => 'setSortOrders'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'application_property_filters' => 'getApplicationPropertyFilters',
        'dataset' => 'getDataset',
        'dataset_property_name' => 'getDatasetPropertyName',
        'disabled_product_filter' => 'getDisabledProductFilter',
        'pagination_input' => 'getPaginationInput',
        'product_identifier' => 'getProductIdentifier',
        'sort_orders' => 'getSortOrders'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('application_property_filters', $data ?? [], null);
        $this->setIfExists('dataset', $data ?? [], null);
        $this->setIfExists('dataset_property_name', $data ?? [], null);
        $this->setIfExists('disabled_product_filter', $data ?? [], null);
        $this->setIfExists('pagination_input', $data ?? [], null);
        $this->setIfExists('product_identifier', $data ?? [], null);
        $this->setIfExists('sort_orders', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets application_property_filters
     *
     * @return \eBay\Sell\Metadata\Model\PropertyFilterInner[]|null
     */
    public function getApplicationPropertyFilters(): ?array
    {
        return $this->container['application_property_filters'];
    }

    /**
     * Sets application_property_filters
     *
     * @param \eBay\Sell\Metadata\Model\PropertyFilterInner[]|null $application_property_filters This array is used to filter the properties of an application, such as a vehicle's make or model, that will be returned in the response.<br><br>Application property filters are specified as name-value pairs. Only products compatible with these name-value pairs will be returned.
     *
     * @return $this
     */
    public function setApplicationPropertyFilters(?array $application_property_filters): static
    {
        if (is_null($application_property_filters)) {
            throw new InvalidArgumentException('non-nullable application_property_filters cannot be null');
        }
        $this->container['application_property_filters'] = $application_property_filters;

        return $this;
    }

    /**
     * Gets dataset
     *
     * @return string[]|null
     */
    public function getDataset(): ?array
    {
        return $this->container['dataset'];
    }

    /**
     * Sets dataset
     *
     * @param string[]|null $dataset This array defines the type of properties that are returned for the catalog-enabled category.<br><br>For example, if you specify <code>Searchable</code>, the compatibility details will contain properties that can be used to search for products, such as make or model.<br><br><span class=\"tablenote\"><b>Note:</b> This field cannot be used alongside <b>dataPropertyName</b>. If both are used, an error will occur.</span><br><b>Valid values:</b><ul><li><code>DisplayableProductDetails</code>: Properties for use in a user interface to describe products.</li><li><code>DisplayableSearchResults</code>: Properties for use in results for product searches.</li><li><code>Searchable</code>: Properties for use in searches.</li><li><code>Sortable</code>: Properties that are suitable for sorting.</li></ul><br><b>Default:</b> <code>DisplayableSearchResults</code>
     *
     * @return $this
     */
    public function setDataset(?array $dataset): static
    {
        if (is_null($dataset)) {
            throw new InvalidArgumentException('non-nullable dataset cannot be null');
        }
        $this->container['dataset'] = $dataset;

        return $this;
    }

    /**
     * Gets dataset_property_name
     *
     * @return string[]|null
     */
    public function getDatasetPropertyName(): ?array
    {
        return $this->container['dataset_property_name'];
    }

    /**
     * Sets dataset_property_name
     *
     * @param string[]|null $dataset_property_name This comma-delimted array can be used to define the specific property name(s) that will be returned in the response.<br><br>For example, if you specify <code>Engine</code>, the result set will only contain engines that are compatible with the input criteria.<br><br><span class=\"tablenote\"><b>Note:</b> This array cannot be used alongside <b>dataset</b>. If both are used, an error will occur.</span>
     *
     * @return $this
     */
    public function setDatasetPropertyName(?array $dataset_property_name): static
    {
        if (is_null($dataset_property_name)) {
            throw new InvalidArgumentException('non-nullable dataset_property_name cannot be null');
        }
        $this->container['dataset_property_name'] = $dataset_property_name;

        return $this;
    }

    /**
     * Gets disabled_product_filter
     *
     * @return \eBay\Sell\Metadata\Model\DisabledProductFilter|null
     */
    public function getDisabledProductFilter(): ?\eBay\Sell\Metadata\Model\DisabledProductFilter
    {
        return $this->container['disabled_product_filter'];
    }

    /**
     * Sets disabled_product_filter
     *
     * @param \eBay\Sell\Metadata\Model\DisabledProductFilter|null $disabled_product_filter disabled_product_filter
     *
     * @return $this
     */
    public function setDisabledProductFilter(?\eBay\Sell\Metadata\Model\DisabledProductFilter $disabled_product_filter): static
    {
        if (is_null($disabled_product_filter)) {
            throw new InvalidArgumentException('non-nullable disabled_product_filter cannot be null');
        }
        $this->container['disabled_product_filter'] = $disabled_product_filter;

        return $this;
    }

    /**
     * Gets pagination_input
     *
     * @return \eBay\Sell\Metadata\Model\PaginationInput|null
     */
    public function getPaginationInput(): ?\eBay\Sell\Metadata\Model\PaginationInput
    {
        return $this->container['pagination_input'];
    }

    /**
     * Sets pagination_input
     *
     * @param \eBay\Sell\Metadata\Model\PaginationInput|null $pagination_input pagination_input
     *
     * @return $this
     */
    public function setPaginationInput(?\eBay\Sell\Metadata\Model\PaginationInput $pagination_input): static
    {
        if (is_null($pagination_input)) {
            throw new InvalidArgumentException('non-nullable pagination_input cannot be null');
        }
        $this->container['pagination_input'] = $pagination_input;

        return $this;
    }

    /**
     * Gets product_identifier
     *
     * @return \eBay\Sell\Metadata\Model\ProductIdentifier|null
     */
    public function getProductIdentifier(): ?\eBay\Sell\Metadata\Model\ProductIdentifier
    {
        return $this->container['product_identifier'];
    }

    /**
     * Sets product_identifier
     *
     * @param \eBay\Sell\Metadata\Model\ProductIdentifier|null $product_identifier product_identifier
     *
     * @return $this
     */
    public function setProductIdentifier(?\eBay\Sell\Metadata\Model\ProductIdentifier $product_identifier): static
    {
        if (is_null($product_identifier)) {
            throw new InvalidArgumentException('non-nullable product_identifier cannot be null');
        }
        $this->container['product_identifier'] = $product_identifier;

        return $this;
    }

    /**
     * Gets sort_orders
     *
     * @return \eBay\Sell\Metadata\Model\SortOrderInner[]|null
     */
    public function getSortOrders(): ?array
    {
        return $this->container['sort_orders'];
    }

    /**
     * Sets sort_orders
     *
     * @param \eBay\Sell\Metadata\Model\SortOrderInner[]|null $sort_orders This array controls the sort order of compatibility properties.
     *
     * @return $this
     */
    public function setSortOrders(?array $sort_orders): static
    {
        if (is_null($sort_orders)) {
            throw new InvalidArgumentException('non-nullable sort_orders cannot be null');
        }
        $this->container['sort_orders'] = $sort_orders;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


