<?php

/**
 * ReturnPolicyDetails
 *
 * PHP version 8.1
 *
 * @package  eBay\Sell\Metadata
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Metadata API
 *
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.11.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eBay\Sell\Metadata\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use eBay\Sell\Metadata\ObjectSerializer;

/**
 * ReturnPolicyDetails Class Doc Comment
 *
 * @description This container defines the category policies that relate to domestic and international return policies (the return shipping is made via a domestic or an international shipping service, respectively).
 * @package  eBay\Sell\Metadata
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ReturnPolicyDetails implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ReturnPolicyDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'policy_description_enabled' => 'bool',
        'refund_methods' => 'string[]',
        'return_methods' => 'string[]',
        'return_periods' => '\eBay\Sell\Metadata\Model\TimeDuration[]',
        'returns_acceptance_enabled' => 'bool',
        'return_shipping_cost_payers' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'policy_description_enabled' => null,
        'refund_methods' => null,
        'return_methods' => null,
        'return_periods' => null,
        'returns_acceptance_enabled' => null,
        'return_shipping_cost_payers' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'policy_description_enabled' => false,
        'refund_methods' => false,
        'return_methods' => false,
        'return_periods' => false,
        'returns_acceptance_enabled' => false,
        'return_shipping_cost_payers' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'policy_description_enabled' => 'policyDescriptionEnabled',
        'refund_methods' => 'refundMethods',
        'return_methods' => 'returnMethods',
        'return_periods' => 'returnPeriods',
        'returns_acceptance_enabled' => 'returnsAcceptanceEnabled',
        'return_shipping_cost_payers' => 'returnShippingCostPayers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'policy_description_enabled' => 'setPolicyDescriptionEnabled',
        'refund_methods' => 'setRefundMethods',
        'return_methods' => 'setReturnMethods',
        'return_periods' => 'setReturnPeriods',
        'returns_acceptance_enabled' => 'setReturnsAcceptanceEnabled',
        'return_shipping_cost_payers' => 'setReturnShippingCostPayers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'policy_description_enabled' => 'getPolicyDescriptionEnabled',
        'refund_methods' => 'getRefundMethods',
        'return_methods' => 'getReturnMethods',
        'return_periods' => 'getReturnPeriods',
        'returns_acceptance_enabled' => 'getReturnsAcceptanceEnabled',
        'return_shipping_cost_payers' => 'getReturnShippingCostPayers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('policy_description_enabled', $data ?? [], null);
        $this->setIfExists('refund_methods', $data ?? [], null);
        $this->setIfExists('return_methods', $data ?? [], null);
        $this->setIfExists('return_periods', $data ?? [], null);
        $this->setIfExists('returns_acceptance_enabled', $data ?? [], null);
        $this->setIfExists('return_shipping_cost_payers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets policy_description_enabled
     *
     * @return bool|null
     */
    public function getPolicyDescriptionEnabled(): ?bool
    {
        return $this->container['policy_description_enabled'];
    }

    /**
     * Sets policy_description_enabled
     *
     * @param bool|null $policy_description_enabled If set to <code>true</code>, this flag indicates you can supply a detailed return policy description within your return policy (for example, by populating the <b>returnInstructions</b> field in the Account API's <b>createReturnPolicy</b>). User-supplied return policy details are allowed only in the DE, ES, FR, and IT marketplaces.
     *
     * @return $this
     */
    public function setPolicyDescriptionEnabled(?bool $policy_description_enabled): static
    {
        if (is_null($policy_description_enabled)) {
            throw new InvalidArgumentException('non-nullable policy_description_enabled cannot be null');
        }
        $this->container['policy_description_enabled'] = $policy_description_enabled;

        return $this;
    }

    /**
     * Gets refund_methods
     *
     * @return string[]|null
     */
    public function getRefundMethods(): ?array
    {
        return $this->container['refund_methods'];
    }

    /**
     * Sets refund_methods
     *
     * @param string[]|null $refund_methods A list of refund methods allowed for the associated category.
     *
     * @return $this
     */
    public function setRefundMethods(?array $refund_methods): static
    {
        if (is_null($refund_methods)) {
            throw new InvalidArgumentException('non-nullable refund_methods cannot be null');
        }
        $this->container['refund_methods'] = $refund_methods;

        return $this;
    }

    /**
     * Gets return_methods
     *
     * @return string[]|null
     */
    public function getReturnMethods(): ?array
    {
        return $this->container['return_methods'];
    }

    /**
     * Sets return_methods
     *
     * @param string[]|null $return_methods A list of return methods allowed for the associated category.
     *
     * @return $this
     */
    public function setReturnMethods(?array $return_methods): static
    {
        if (is_null($return_methods)) {
            throw new InvalidArgumentException('non-nullable return_methods cannot be null');
        }
        $this->container['return_methods'] = $return_methods;

        return $this;
    }

    /**
     * Gets return_periods
     *
     * @return \eBay\Sell\Metadata\Model\TimeDuration[]|null
     */
    public function getReturnPeriods(): ?array
    {
        return $this->container['return_periods'];
    }

    /**
     * Sets return_periods
     *
     * @param \eBay\Sell\Metadata\Model\TimeDuration[]|null $return_periods A list of return periods allowed for the associated category.  <br><br>Note that different APIs require you to enter the return period in different ways. For example, the Account API uses the complex <b>TimeDuration</b> type, which takes two values (a <b>unit</b> and a <b>value</b>), whereas the Trading API takes a single value (such as <code>Days_30</code>).
     *
     * @return $this
     */
    public function setReturnPeriods(?array $return_periods): static
    {
        if (is_null($return_periods)) {
            throw new InvalidArgumentException('non-nullable return_periods cannot be null');
        }
        $this->container['return_periods'] = $return_periods;

        return $this;
    }

    /**
     * Gets returns_acceptance_enabled
     *
     * @return bool|null
     */
    public function getReturnsAcceptanceEnabled(): ?bool
    {
        return $this->container['returns_acceptance_enabled'];
    }

    /**
     * Sets returns_acceptance_enabled
     *
     * @param bool|null $returns_acceptance_enabled If set to <code>true</code>, this flag indicates the seller can configure how they handle domestic returns.
     *
     * @return $this
     */
    public function setReturnsAcceptanceEnabled(?bool $returns_acceptance_enabled): static
    {
        if (is_null($returns_acceptance_enabled)) {
            throw new InvalidArgumentException('non-nullable returns_acceptance_enabled cannot be null');
        }
        $this->container['returns_acceptance_enabled'] = $returns_acceptance_enabled;

        return $this;
    }

    /**
     * Gets return_shipping_cost_payers
     *
     * @return string[]|null
     */
    public function getReturnShippingCostPayers(): ?array
    {
        return $this->container['return_shipping_cost_payers'];
    }

    /**
     * Sets return_shipping_cost_payers
     *
     * @param string[]|null $return_shipping_cost_payers A list of allowed values for who pays for the return shipping cost.  <br><br>Note that for SNAD returns, the seller is always responsible for the return shipping cost.
     *
     * @return $this
     */
    public function setReturnShippingCostPayers(?array $return_shipping_cost_payers): static
    {
        if (is_null($return_shipping_cost_payers)) {
            throw new InvalidArgumentException('non-nullable return_shipping_cost_payers cannot be null');
        }
        $this->container['return_shipping_cost_payers'] = $return_shipping_cost_payers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


