<?php

/**
 * CompatibilitiesApi
 * PHP version 8.1
 *
 * @package  eBay\Sell\Metadata
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Metadata API
 *
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.11.1
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace eBay\Sell\Metadata\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use eBay\Sell\Metadata\ApiException;
use eBay\Sell\Metadata\Configuration;
use eBay\Sell\Metadata\HeaderSelector;
use eBay\Sell\Metadata\FormDataProcessor;
use eBay\Sell\Metadata\ObjectSerializer;

/**
 * CompatibilitiesApi Class Doc Comment
 *
 * @package  eBay\Sell\Metadata
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CompatibilitiesApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getCompatibilitiesBySpecification' => [
            'application/json',
        ],
        'getCompatibilityPropertyNames' => [
            'application/json',
        ],
        'getCompatibilityPropertyValues' => [
            'application/json',
        ],
        'getMultiCompatibilityPropertyValues' => [
            'application/json',
        ],
        'getProductCompatibilities' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation getCompatibilitiesBySpecification
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\SpecificationRequest|null $specification_request This type defines the properties and specifications to use to search for compatibilities. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilitiesBySpecification'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \eBay\Sell\Metadata\Model\SpecificationResponse
     */
    public function getCompatibilitiesBySpecification(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\SpecificationRequest $specification_request = null,
        string $contentType = self::contentTypes['getCompatibilitiesBySpecification'][0]
    ): \eBay\Sell\Metadata\Model\SpecificationResponse {
        list($response) = $this->getCompatibilitiesBySpecificationWithHttpInfo($x_ebay_c_marketplace_id, $specification_request, $contentType);
        return $response;
    }

    /**
     * Operation getCompatibilitiesBySpecificationWithHttpInfo
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\SpecificationRequest|null $specification_request This type defines the properties and specifications to use to search for compatibilities. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilitiesBySpecification'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \eBay\Sell\Metadata\Model\SpecificationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompatibilitiesBySpecificationWithHttpInfo(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\SpecificationRequest $specification_request = null,
        string $contentType = self::contentTypes['getCompatibilitiesBySpecification'][0]
    ): array {
        $request = $this->getCompatibilitiesBySpecificationRequest($x_ebay_c_marketplace_id, $specification_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\eBay\Sell\Metadata\Model\SpecificationResponse',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\eBay\Sell\Metadata\Model\SpecificationResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eBay\Sell\Metadata\Model\SpecificationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation getCompatibilitiesBySpecificationAsync
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\SpecificationRequest|null $specification_request This type defines the properties and specifications to use to search for compatibilities. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilitiesBySpecification'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCompatibilitiesBySpecificationAsync(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\SpecificationRequest $specification_request = null,
        string $contentType = self::contentTypes['getCompatibilitiesBySpecification'][0]
    ): PromiseInterface {
        return $this->getCompatibilitiesBySpecificationAsyncWithHttpInfo($x_ebay_c_marketplace_id, $specification_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompatibilitiesBySpecificationAsyncWithHttpInfo
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\SpecificationRequest|null $specification_request This type defines the properties and specifications to use to search for compatibilities. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilitiesBySpecification'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCompatibilitiesBySpecificationAsyncWithHttpInfo(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\SpecificationRequest $specification_request = null,
        string $contentType = self::contentTypes['getCompatibilitiesBySpecification'][0]
    ): PromiseInterface {
        $returnType = '\eBay\Sell\Metadata\Model\SpecificationResponse';
        $request = $this->getCompatibilitiesBySpecificationRequest($x_ebay_c_marketplace_id, $specification_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompatibilitiesBySpecification'
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\SpecificationRequest|null $specification_request This type defines the properties and specifications to use to search for compatibilities. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilitiesBySpecification'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompatibilitiesBySpecificationRequest(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\SpecificationRequest $specification_request = null,
        string $contentType = self::contentTypes['getCompatibilitiesBySpecification'][0]
    ): Request {

        // verify the required parameter 'x_ebay_c_marketplace_id' is set
        if ($x_ebay_c_marketplace_id === null || (is_array($x_ebay_c_marketplace_id) && count($x_ebay_c_marketplace_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $x_ebay_c_marketplace_id when calling getCompatibilitiesBySpecification'
            );
        }



        $resourcePath = '/compatibilities/get_compatibilities_by_specification';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_ebay_c_marketplace_id !== null) {
            $headerParams['X-EBAY-C-MARKETPLACE-ID'] = ObjectSerializer::toHeaderValue($x_ebay_c_marketplace_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($specification_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($specification_request));
            } else {
                $httpBody = $specification_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompatibilityPropertyNames
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\PropertyNamesRequest|null $property_names_request This type defines the properties used to retrieve compatibility property names. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilityPropertyNames'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \eBay\Sell\Metadata\Model\PropertyNamesResponse
     */
    public function getCompatibilityPropertyNames(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\PropertyNamesRequest $property_names_request = null,
        string $contentType = self::contentTypes['getCompatibilityPropertyNames'][0]
    ): \eBay\Sell\Metadata\Model\PropertyNamesResponse {
        list($response) = $this->getCompatibilityPropertyNamesWithHttpInfo($x_ebay_c_marketplace_id, $property_names_request, $contentType);
        return $response;
    }

    /**
     * Operation getCompatibilityPropertyNamesWithHttpInfo
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\PropertyNamesRequest|null $property_names_request This type defines the properties used to retrieve compatibility property names. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilityPropertyNames'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \eBay\Sell\Metadata\Model\PropertyNamesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompatibilityPropertyNamesWithHttpInfo(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\PropertyNamesRequest $property_names_request = null,
        string $contentType = self::contentTypes['getCompatibilityPropertyNames'][0]
    ): array {
        $request = $this->getCompatibilityPropertyNamesRequest($x_ebay_c_marketplace_id, $property_names_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\eBay\Sell\Metadata\Model\PropertyNamesResponse',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\eBay\Sell\Metadata\Model\PropertyNamesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eBay\Sell\Metadata\Model\PropertyNamesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation getCompatibilityPropertyNamesAsync
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\PropertyNamesRequest|null $property_names_request This type defines the properties used to retrieve compatibility property names. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilityPropertyNames'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCompatibilityPropertyNamesAsync(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\PropertyNamesRequest $property_names_request = null,
        string $contentType = self::contentTypes['getCompatibilityPropertyNames'][0]
    ): PromiseInterface {
        return $this->getCompatibilityPropertyNamesAsyncWithHttpInfo($x_ebay_c_marketplace_id, $property_names_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompatibilityPropertyNamesAsyncWithHttpInfo
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\PropertyNamesRequest|null $property_names_request This type defines the properties used to retrieve compatibility property names. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilityPropertyNames'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCompatibilityPropertyNamesAsyncWithHttpInfo(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\PropertyNamesRequest $property_names_request = null,
        string $contentType = self::contentTypes['getCompatibilityPropertyNames'][0]
    ): PromiseInterface {
        $returnType = '\eBay\Sell\Metadata\Model\PropertyNamesResponse';
        $request = $this->getCompatibilityPropertyNamesRequest($x_ebay_c_marketplace_id, $property_names_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompatibilityPropertyNames'
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\PropertyNamesRequest|null $property_names_request This type defines the properties used to retrieve compatibility property names. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilityPropertyNames'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompatibilityPropertyNamesRequest(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\PropertyNamesRequest $property_names_request = null,
        string $contentType = self::contentTypes['getCompatibilityPropertyNames'][0]
    ): Request {

        // verify the required parameter 'x_ebay_c_marketplace_id' is set
        if ($x_ebay_c_marketplace_id === null || (is_array($x_ebay_c_marketplace_id) && count($x_ebay_c_marketplace_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $x_ebay_c_marketplace_id when calling getCompatibilityPropertyNames'
            );
        }



        $resourcePath = '/compatibilities/get_compatibility_property_names';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_ebay_c_marketplace_id !== null) {
            $headerParams['X-EBAY-C-MARKETPLACE-ID'] = ObjectSerializer::toHeaderValue($x_ebay_c_marketplace_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($property_names_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($property_names_request));
            } else {
                $httpBody = $property_names_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompatibilityPropertyValues
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\PropertyValuesRequest|null $property_values_request This type defines the category ID and property name for which to retrieve values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilityPropertyValues'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \eBay\Sell\Metadata\Model\PropertyValuesResponse
     */
    public function getCompatibilityPropertyValues(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\PropertyValuesRequest $property_values_request = null,
        string $contentType = self::contentTypes['getCompatibilityPropertyValues'][0]
    ): \eBay\Sell\Metadata\Model\PropertyValuesResponse {
        list($response) = $this->getCompatibilityPropertyValuesWithHttpInfo($x_ebay_c_marketplace_id, $property_values_request, $contentType);
        return $response;
    }

    /**
     * Operation getCompatibilityPropertyValuesWithHttpInfo
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\PropertyValuesRequest|null $property_values_request This type defines the category ID and property name for which to retrieve values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilityPropertyValues'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \eBay\Sell\Metadata\Model\PropertyValuesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompatibilityPropertyValuesWithHttpInfo(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\PropertyValuesRequest $property_values_request = null,
        string $contentType = self::contentTypes['getCompatibilityPropertyValues'][0]
    ): array {
        $request = $this->getCompatibilityPropertyValuesRequest($x_ebay_c_marketplace_id, $property_values_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\eBay\Sell\Metadata\Model\PropertyValuesResponse',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\eBay\Sell\Metadata\Model\PropertyValuesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eBay\Sell\Metadata\Model\PropertyValuesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation getCompatibilityPropertyValuesAsync
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\PropertyValuesRequest|null $property_values_request This type defines the category ID and property name for which to retrieve values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilityPropertyValues'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCompatibilityPropertyValuesAsync(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\PropertyValuesRequest $property_values_request = null,
        string $contentType = self::contentTypes['getCompatibilityPropertyValues'][0]
    ): PromiseInterface {
        return $this->getCompatibilityPropertyValuesAsyncWithHttpInfo($x_ebay_c_marketplace_id, $property_values_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompatibilityPropertyValuesAsyncWithHttpInfo
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\PropertyValuesRequest|null $property_values_request This type defines the category ID and property name for which to retrieve values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilityPropertyValues'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCompatibilityPropertyValuesAsyncWithHttpInfo(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\PropertyValuesRequest $property_values_request = null,
        string $contentType = self::contentTypes['getCompatibilityPropertyValues'][0]
    ): PromiseInterface {
        $returnType = '\eBay\Sell\Metadata\Model\PropertyValuesResponse';
        $request = $this->getCompatibilityPropertyValuesRequest($x_ebay_c_marketplace_id, $property_values_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompatibilityPropertyValues'
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\PropertyValuesRequest|null $property_values_request This type defines the category ID and property name for which to retrieve values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilityPropertyValues'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompatibilityPropertyValuesRequest(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\PropertyValuesRequest $property_values_request = null,
        string $contentType = self::contentTypes['getCompatibilityPropertyValues'][0]
    ): Request {

        // verify the required parameter 'x_ebay_c_marketplace_id' is set
        if ($x_ebay_c_marketplace_id === null || (is_array($x_ebay_c_marketplace_id) && count($x_ebay_c_marketplace_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $x_ebay_c_marketplace_id when calling getCompatibilityPropertyValues'
            );
        }



        $resourcePath = '/compatibilities/get_compatibility_property_values';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_ebay_c_marketplace_id !== null) {
            $headerParams['X-EBAY-C-MARKETPLACE-ID'] = ObjectSerializer::toHeaderValue($x_ebay_c_marketplace_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($property_values_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($property_values_request));
            } else {
                $httpBody = $property_values_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMultiCompatibilityPropertyValues
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\MultiCompatibilityPropertyValuesRequest|null $multi_compatibility_property_values_request This type defines the category ID and property names for which to retrieve values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMultiCompatibilityPropertyValues'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \eBay\Sell\Metadata\Model\MultiCompatibilityPropertyValuesResponse
     */
    public function getMultiCompatibilityPropertyValues(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\MultiCompatibilityPropertyValuesRequest $multi_compatibility_property_values_request = null,
        string $contentType = self::contentTypes['getMultiCompatibilityPropertyValues'][0]
    ): \eBay\Sell\Metadata\Model\MultiCompatibilityPropertyValuesResponse {
        list($response) = $this->getMultiCompatibilityPropertyValuesWithHttpInfo($x_ebay_c_marketplace_id, $multi_compatibility_property_values_request, $contentType);
        return $response;
    }

    /**
     * Operation getMultiCompatibilityPropertyValuesWithHttpInfo
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\MultiCompatibilityPropertyValuesRequest|null $multi_compatibility_property_values_request This type defines the category ID and property names for which to retrieve values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMultiCompatibilityPropertyValues'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \eBay\Sell\Metadata\Model\MultiCompatibilityPropertyValuesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMultiCompatibilityPropertyValuesWithHttpInfo(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\MultiCompatibilityPropertyValuesRequest $multi_compatibility_property_values_request = null,
        string $contentType = self::contentTypes['getMultiCompatibilityPropertyValues'][0]
    ): array {
        $request = $this->getMultiCompatibilityPropertyValuesRequest($x_ebay_c_marketplace_id, $multi_compatibility_property_values_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\eBay\Sell\Metadata\Model\MultiCompatibilityPropertyValuesResponse',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\eBay\Sell\Metadata\Model\MultiCompatibilityPropertyValuesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eBay\Sell\Metadata\Model\MultiCompatibilityPropertyValuesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation getMultiCompatibilityPropertyValuesAsync
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\MultiCompatibilityPropertyValuesRequest|null $multi_compatibility_property_values_request This type defines the category ID and property names for which to retrieve values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMultiCompatibilityPropertyValues'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getMultiCompatibilityPropertyValuesAsync(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\MultiCompatibilityPropertyValuesRequest $multi_compatibility_property_values_request = null,
        string $contentType = self::contentTypes['getMultiCompatibilityPropertyValues'][0]
    ): PromiseInterface {
        return $this->getMultiCompatibilityPropertyValuesAsyncWithHttpInfo($x_ebay_c_marketplace_id, $multi_compatibility_property_values_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMultiCompatibilityPropertyValuesAsyncWithHttpInfo
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\MultiCompatibilityPropertyValuesRequest|null $multi_compatibility_property_values_request This type defines the category ID and property names for which to retrieve values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMultiCompatibilityPropertyValues'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getMultiCompatibilityPropertyValuesAsyncWithHttpInfo(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\MultiCompatibilityPropertyValuesRequest $multi_compatibility_property_values_request = null,
        string $contentType = self::contentTypes['getMultiCompatibilityPropertyValues'][0]
    ): PromiseInterface {
        $returnType = '\eBay\Sell\Metadata\Model\MultiCompatibilityPropertyValuesResponse';
        $request = $this->getMultiCompatibilityPropertyValuesRequest($x_ebay_c_marketplace_id, $multi_compatibility_property_values_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMultiCompatibilityPropertyValues'
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\MultiCompatibilityPropertyValuesRequest|null $multi_compatibility_property_values_request This type defines the category ID and property names for which to retrieve values. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMultiCompatibilityPropertyValues'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMultiCompatibilityPropertyValuesRequest(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\MultiCompatibilityPropertyValuesRequest $multi_compatibility_property_values_request = null,
        string $contentType = self::contentTypes['getMultiCompatibilityPropertyValues'][0]
    ): Request {

        // verify the required parameter 'x_ebay_c_marketplace_id' is set
        if ($x_ebay_c_marketplace_id === null || (is_array($x_ebay_c_marketplace_id) && count($x_ebay_c_marketplace_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $x_ebay_c_marketplace_id when calling getMultiCompatibilityPropertyValues'
            );
        }



        $resourcePath = '/compatibilities/get_multi_compatibility_property_values';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_ebay_c_marketplace_id !== null) {
            $headerParams['X-EBAY-C-MARKETPLACE-ID'] = ObjectSerializer::toHeaderValue($x_ebay_c_marketplace_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($multi_compatibility_property_values_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($multi_compatibility_property_values_request));
            } else {
                $httpBody = $multi_compatibility_property_values_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductCompatibilities
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\ProductRequest|null $product_request This type defines properties for which to find compatibilities. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductCompatibilities'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \eBay\Sell\Metadata\Model\ProductResponse
     */
    public function getProductCompatibilities(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\ProductRequest $product_request = null,
        string $contentType = self::contentTypes['getProductCompatibilities'][0]
    ): \eBay\Sell\Metadata\Model\ProductResponse {
        list($response) = $this->getProductCompatibilitiesWithHttpInfo($x_ebay_c_marketplace_id, $product_request, $contentType);
        return $response;
    }

    /**
     * Operation getProductCompatibilitiesWithHttpInfo
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\ProductRequest|null $product_request This type defines properties for which to find compatibilities. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductCompatibilities'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \eBay\Sell\Metadata\Model\ProductResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductCompatibilitiesWithHttpInfo(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\ProductRequest $product_request = null,
        string $contentType = self::contentTypes['getProductCompatibilities'][0]
    ): array {
        $request = $this->getProductCompatibilitiesRequest($x_ebay_c_marketplace_id, $product_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\eBay\Sell\Metadata\Model\ProductResponse',
                        $request,
                        $response,
                    );
            }


            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\eBay\Sell\Metadata\Model\ProductResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\eBay\Sell\Metadata\Model\ProductResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation getProductCompatibilitiesAsync
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\ProductRequest|null $product_request This type defines properties for which to find compatibilities. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductCompatibilities'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getProductCompatibilitiesAsync(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\ProductRequest $product_request = null,
        string $contentType = self::contentTypes['getProductCompatibilities'][0]
    ): PromiseInterface {
        return $this->getProductCompatibilitiesAsyncWithHttpInfo($x_ebay_c_marketplace_id, $product_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductCompatibilitiesAsyncWithHttpInfo
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\ProductRequest|null $product_request This type defines properties for which to find compatibilities. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductCompatibilities'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getProductCompatibilitiesAsyncWithHttpInfo(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\ProductRequest $product_request = null,
        string $contentType = self::contentTypes['getProductCompatibilities'][0]
    ): PromiseInterface {
        $returnType = '\eBay\Sell\Metadata\Model\ProductResponse';
        $request = $this->getProductCompatibilitiesRequest($x_ebay_c_marketplace_id, $product_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductCompatibilities'
     *
     * @param  string $x_ebay_c_marketplace_id This header identifies the seller&#39;s eBay marketplace.&lt;br&gt;&lt;br&gt;See &lt;a href&#x3D;\&quot;/api-docs/sell/metadata/overview.html#requirements\&quot; target&#x3D;\&quot;_blank \&quot;&gt;Metadata API requirements and restrictions&lt;/a&gt; for supported values. (required)
     * @param  \eBay\Sell\Metadata\Model\ProductRequest|null $product_request This type defines properties for which to find compatibilities. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductCompatibilities'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductCompatibilitiesRequest(
        string $x_ebay_c_marketplace_id,
        ?\eBay\Sell\Metadata\Model\ProductRequest $product_request = null,
        string $contentType = self::contentTypes['getProductCompatibilities'][0]
    ): Request {

        // verify the required parameter 'x_ebay_c_marketplace_id' is set
        if ($x_ebay_c_marketplace_id === null || (is_array($x_ebay_c_marketplace_id) && count($x_ebay_c_marketplace_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $x_ebay_c_marketplace_id when calling getProductCompatibilities'
            );
        }



        $resourcePath = '/compatibilities/get_product_compatibilities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_ebay_c_marketplace_id !== null) {
            $headerParams['X-EBAY-C-MARKETPLACE-ID'] = ObjectSerializer::toHeaderValue($x_ebay_c_marketplace_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($product_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($product_request));
            } else {
                $httpBody = $product_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response,
    ): array {
        if (in_array($dataType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'], true)) {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode,
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
