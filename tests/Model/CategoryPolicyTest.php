<?php
/**
 * CategoryPolicyTest
 *
 * PHP version 8.1
 *
 * @package  eBay\Sell\Metadata
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Metadata API
 *
 * The Metadata API has operations that retrieve configuration details pertaining to the different eBay marketplaces. In addition to marketplace information, the API also has operations that get information that helps sellers list items on eBay.
 *
 * The version of the OpenAPI document: v1.11.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace eBay\Sell\Metadata\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * CategoryPolicyTest Class Doc Comment
 *
 * @description This type contains applicable policy metadata for the leaf categories returned for the marketplace.
 * @package     eBay\Sell\Metadata
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class CategoryPolicyTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "CategoryPolicy"
     */
    public function testCategoryPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "auto_pay_enabled"
     */
    public function testPropertyAutoPayEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "b2b_vat_enabled"
     */
    public function testPropertyB2bVatEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "category_id"
     */
    public function testPropertyCategoryId()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "category_tree_id"
     */
    public function testPropertyCategoryTreeId()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "ean_support"
     */
    public function testPropertyEanSupport()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "expired"
     */
    public function testPropertyExpired()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "intangible_enabled"
     */
    public function testPropertyIntangibleEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "isbn_support"
     */
    public function testPropertyIsbnSupport()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "lsd"
     */
    public function testPropertyLsd()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "minimum_reserve_price"
     */
    public function testPropertyMinimumReservePrice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "orpa"
     */
    public function testPropertyOrpa()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "orra"
     */
    public function testPropertyOrra()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "payment_methods"
     */
    public function testPropertyPaymentMethods()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "reduce_reserve_allowed"
     */
    public function testPropertyReduceReserveAllowed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "upc_support"
     */
    public function testPropertyUpcSupport()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "virtual"
     */
    public function testPropertyVirtual()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
